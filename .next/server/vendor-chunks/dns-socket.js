"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/dns-socket";
exports.ids = ["vendor-chunks/dns-socket"];
exports.modules = {

/***/ "(ssr)/./node_modules/dns-socket/index.js":
/*!******************************************!*\
  !*** ./node_modules/dns-socket/index.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst dgram = __webpack_require__(/*! dgram */ \"dgram\");\nconst util = __webpack_require__(/*! util */ \"util\");\nconst packet = __webpack_require__(/*! dns-packet */ \"(ssr)/./node_modules/dns-packet/index.js\");\nconst events = __webpack_require__(/*! events */ \"events\");\nmodule.exports = DNS;\nfunction DNS(opts) {\n    if (!(this instanceof DNS)) {\n        return new DNS(opts);\n    }\n    if (!opts) {\n        opts = {};\n    }\n    events.EventEmitter.call(this);\n    const self = this;\n    this.retries = opts.retries !== undefined ? opts.retries : 5;\n    this.timeout = opts.timeout || 7500;\n    this.timeoutChecks = opts.timeoutChecks || this.timeout / 10;\n    this.destroyed = false;\n    this.inflight = 0;\n    this.maxQueries = opts.maxQueries || 10000;\n    this.maxRedirects = opts.maxRedirects || 0;\n    this.socket = opts.socket || dgram.createSocket(\"udp4\");\n    this._id = Math.ceil(Math.random() * this.maxQueries);\n    this._queries = new Array(this.maxQueries).fill(null);\n    this._interval = null;\n    this.socket.on(\"error\", onerror);\n    this.socket.on(\"message\", onmessage);\n    if (isListening(this.socket)) onlistening();\n    else this.socket.on(\"listening\", onlistening);\n    this.socket.on(\"close\", onclose);\n    function onerror(err) {\n        if (err.code === \"EACCES\" || err.code === \"EADDRINUSE\") {\n            self.emit(\"error\", err);\n        } else {\n            self.emit(\"warning\", err);\n        }\n    }\n    function onmessage(message, rinfo) {\n        self._onmessage(message, rinfo);\n    }\n    function ontimeoutCheck() {\n        self._ontimeoutCheck();\n    }\n    function onlistening() {\n        self._interval = setInterval(ontimeoutCheck, self.timeoutChecks);\n        self.emit(\"listening\");\n    }\n    function onclose() {\n        self.emit(\"close\");\n    }\n}\nutil.inherits(DNS, events.EventEmitter);\nDNS.RECURSION_DESIRED = DNS.prototype.RECURSION_DESIRED = packet.RECURSION_DESIRED;\nDNS.RECURSION_AVAILABLE = DNS.prototype.RECURSION_AVAILABLE = packet.RECURSION_AVAILABLE;\nDNS.TRUNCATED_RESPONSE = DNS.prototype.TRUNCATED_RESPONSE = packet.TRUNCATED_RESPONSE;\nDNS.AUTHORITATIVE_ANSWER = DNS.prototype.AUTHORITATIVE_ANSWER = packet.AUTHORITATIVE_ANSWER;\nDNS.AUTHENTIC_DATA = DNS.prototype.AUTHENTIC_DATA = packet.AUTHENTIC_DATA;\nDNS.CHECKING_DISABLED = DNS.prototype.CHECKING_DISABLED = packet.CHECKING_DISABLED;\nDNS.prototype.address = function() {\n    return this.socket.address();\n};\nDNS.prototype.bind = function(...args) {\n    const onlistening = args.length > 0 && args[args.length - 1];\n    if (typeof onlistening === \"function\") {\n        this.once(\"listening\", onlistening);\n        this.socket.bind(...args.slice(0, -1));\n    } else {\n        this.socket.bind(...args);\n    }\n};\nDNS.prototype.destroy = function(onclose) {\n    if (onclose) {\n        this.once(\"close\", onclose);\n    }\n    if (this.destroyed) {\n        return;\n    }\n    this.destroyed = true;\n    clearInterval(this._interval);\n    this.socket.close();\n    for(let i = 0; i < this.maxQueries; i++){\n        const q = this._queries[i];\n        if (q) {\n            q.callback(new Error(\"Socket destroyed\"));\n            this._queries[i] = null;\n        }\n    }\n    this.inflight = 0;\n};\nDNS.prototype._ontimeoutCheck = function() {\n    const now = Date.now();\n    for(let i = 0; i < this.maxQueries; i++){\n        const q = this._queries[i];\n        if (!q || now - q.firstTry < (q.tries + 1) * this.timeout) {\n            continue;\n        }\n        if (q.tries > this.retries) {\n            this._queries[i] = null;\n            this.inflight--;\n            this.emit(\"timeout\", q.query, q.port, q.host);\n            q.callback(new Error(\"Query timed out\"));\n            continue;\n        }\n        q.tries++;\n        this.socket.send(q.buffer, 0, q.buffer.length, q.port, Array.isArray(q.host) ? q.host[Math.floor(q.host.length * Math.random())] : q.host || \"127.0.0.1\");\n    }\n};\nDNS.prototype._shouldRedirect = function(q, result) {\n    // no redirects, no query, more than 1 questions, has any A record answer\n    if (this.maxRedirects <= 0 || !q || q.query.questions.length !== 1 || result.answers.filter((e)=>e.type === \"A\").length > 0) {\n        return false;\n    }\n    // no more redirects left\n    if (q.redirects > this.maxRedirects) {\n        return false;\n    }\n    const cnameresults = result.answers.filter((e)=>e.type === \"CNAME\");\n    if (cnameresults.length === 0) {\n        return false;\n    }\n    const id = this._getNextEmptyId();\n    if (id === -1) {\n        q.callback(new Error(\"Query array is full!\"));\n        return true;\n    }\n    // replace current query with a new one\n    q.query = {\n        id: id + 1,\n        flags: packet.RECURSION_DESIRED,\n        questions: [\n            {\n                type: \"A\",\n                name: cnameresults[0].data\n            }\n        ]\n    };\n    q.redirects++;\n    q.firstTry = Date.now();\n    q.tries = 0;\n    q.buffer = packet.encode(q.query);\n    this._queries[id] = q;\n    this.socket.send(q.buffer, 0, q.buffer.length, q.port, Array.isArray(q.host) ? q.host[Math.floor(q.host.length * Math.random())] : q.host || \"127.0.0.1\");\n    return true;\n};\nDNS.prototype._onmessage = function(buffer, rinfo) {\n    let message;\n    try {\n        message = packet.decode(buffer);\n    } catch (err) {\n        this.emit(\"warning\", err);\n        return;\n    }\n    if (message.type === \"response\" && message.id) {\n        const q = this._queries[message.id - 1];\n        if (q) {\n            this._queries[message.id - 1] = null;\n            this.inflight--;\n            if (!this._shouldRedirect(q, message)) {\n                q.callback(null, message);\n            }\n        }\n    }\n    this.emit(message.type, message, rinfo.port, rinfo.address);\n};\nDNS.prototype.unref = function() {\n    this.socket.unref();\n};\nDNS.prototype.ref = function() {\n    this.socket.ref();\n};\nDNS.prototype.response = function(query, response, port, host) {\n    if (this.destroyed) {\n        return;\n    }\n    response.type = \"response\";\n    response.id = query.id;\n    const buffer = packet.encode(response);\n    this.socket.send(buffer, 0, buffer.length, port, host);\n};\nDNS.prototype.cancel = function(id) {\n    const q = this._queries[id];\n    if (!q) return;\n    this._queries[id] = null;\n    this.inflight--;\n    q.callback(new Error(\"Query cancelled\"));\n};\nDNS.prototype.setRetries = function(id, retries) {\n    const q = this._queries[id];\n    if (!q) return;\n    q.firstTry = q.firstTry - this.timeout * (retries - q.retries);\n    q.retries = this.retries - retries;\n};\nDNS.prototype._getNextEmptyId = function() {\n    // try to find the next unused id\n    let id = -1;\n    for(let idtries = this.maxQueries; idtries > 0; idtries--){\n        const normalizedId = (this._id + idtries) % this.maxQueries;\n        if (this._queries[normalizedId] === null) {\n            id = normalizedId;\n            this._id = (normalizedId + 1) % this.maxQueries;\n            break;\n        }\n    }\n    return id;\n};\nDNS.prototype.query = function(query, port, host, cb) {\n    if (this.destroyed) {\n        cb(new Error(\"Socket destroyed\"));\n        return 0;\n    }\n    this.inflight++;\n    query.type = \"query\";\n    query.flags = typeof query.flags === \"number\" ? query.flags : DNS.RECURSION_DESIRED;\n    const id = this._getNextEmptyId();\n    if (id === -1) {\n        cb(new Error(\"Query array is full!\"));\n        return 0;\n    }\n    query.id = id + 1;\n    const buffer = packet.encode(query);\n    this._queries[id] = {\n        callback: cb || noop,\n        redirects: 0,\n        firstTry: Date.now(),\n        query: query,\n        tries: 0,\n        buffer: buffer,\n        port: port,\n        host: host\n    };\n    this.socket.send(buffer, 0, buffer.length, port, Array.isArray(host) ? host[Math.floor(host.length * Math.random())] : host || \"127.0.0.1\");\n    return id;\n};\nfunction noop() {}\nfunction isListening(socket) {\n    try {\n        return socket.address().port !== 0;\n    } catch (err) {\n        return false;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/dns-socket/index.js\n");

/***/ })

};
;