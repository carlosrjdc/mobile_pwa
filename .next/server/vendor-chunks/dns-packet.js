"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/dns-packet";
exports.ids = ["vendor-chunks/dns-packet"];
exports.modules = {

/***/ "(ssr)/./node_modules/dns-packet/classes.js":
/*!********************************************!*\
  !*** ./node_modules/dns-packet/classes.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nexports.toString = function(klass) {\n    switch(klass){\n        case 1:\n            return \"IN\";\n        case 2:\n            return \"CS\";\n        case 3:\n            return \"CH\";\n        case 4:\n            return \"HS\";\n        case 255:\n            return \"ANY\";\n    }\n    return \"UNKNOWN_\" + klass;\n};\nexports.toClass = function(name) {\n    switch(name.toUpperCase()){\n        case \"IN\":\n            return 1;\n        case \"CS\":\n            return 2;\n        case \"CH\":\n            return 3;\n        case \"HS\":\n            return 4;\n        case \"ANY\":\n            return 255;\n    }\n    return 0;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZG5zLXBhY2tldC9jbGFzc2VzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLGdCQUFnQixHQUFHLFNBQVVFLEtBQUs7SUFDaEMsT0FBUUE7UUFDTixLQUFLO1lBQUcsT0FBTztRQUNmLEtBQUs7WUFBRyxPQUFPO1FBQ2YsS0FBSztZQUFHLE9BQU87UUFDZixLQUFLO1lBQUcsT0FBTztRQUNmLEtBQUs7WUFBSyxPQUFPO0lBQ25CO0lBQ0EsT0FBTyxhQUFhQTtBQUN0QjtBQUVBRixlQUFlLEdBQUcsU0FBVUksSUFBSTtJQUM5QixPQUFRQSxLQUFLQyxXQUFXO1FBQ3RCLEtBQUs7WUFBTSxPQUFPO1FBQ2xCLEtBQUs7WUFBTSxPQUFPO1FBQ2xCLEtBQUs7WUFBTSxPQUFPO1FBQ2xCLEtBQUs7WUFBTSxPQUFPO1FBQ2xCLEtBQUs7WUFBTyxPQUFPO0lBQ3JCO0lBQ0EsT0FBTztBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbW9iaWxlLy4vbm9kZV9tb2R1bGVzL2Rucy1wYWNrZXQvY2xhc3Nlcy5qcz9lYWM0Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5leHBvcnRzLnRvU3RyaW5nID0gZnVuY3Rpb24gKGtsYXNzKSB7XG4gIHN3aXRjaCAoa2xhc3MpIHtcbiAgICBjYXNlIDE6IHJldHVybiAnSU4nXG4gICAgY2FzZSAyOiByZXR1cm4gJ0NTJ1xuICAgIGNhc2UgMzogcmV0dXJuICdDSCdcbiAgICBjYXNlIDQ6IHJldHVybiAnSFMnXG4gICAgY2FzZSAyNTU6IHJldHVybiAnQU5ZJ1xuICB9XG4gIHJldHVybiAnVU5LTk9XTl8nICsga2xhc3Ncbn1cblxuZXhwb3J0cy50b0NsYXNzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgc3dpdGNoIChuYW1lLnRvVXBwZXJDYXNlKCkpIHtcbiAgICBjYXNlICdJTic6IHJldHVybiAxXG4gICAgY2FzZSAnQ1MnOiByZXR1cm4gMlxuICAgIGNhc2UgJ0NIJzogcmV0dXJuIDNcbiAgICBjYXNlICdIUyc6IHJldHVybiA0XG4gICAgY2FzZSAnQU5ZJzogcmV0dXJuIDI1NVxuICB9XG4gIHJldHVybiAwXG59XG4iXSwibmFtZXMiOlsiZXhwb3J0cyIsInRvU3RyaW5nIiwia2xhc3MiLCJ0b0NsYXNzIiwibmFtZSIsInRvVXBwZXJDYXNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/dns-packet/classes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/dns-packet/index.js":
/*!******************************************!*\
  !*** ./node_modules/dns-packet/index.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nconst Buffer = (__webpack_require__(/*! buffer */ \"buffer\").Buffer);\nconst types = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/dns-packet/types.js\");\nconst rcodes = __webpack_require__(/*! ./rcodes */ \"(ssr)/./node_modules/dns-packet/rcodes.js\");\nconst opcodes = __webpack_require__(/*! ./opcodes */ \"(ssr)/./node_modules/dns-packet/opcodes.js\");\nconst classes = __webpack_require__(/*! ./classes */ \"(ssr)/./node_modules/dns-packet/classes.js\");\nconst optioncodes = __webpack_require__(/*! ./optioncodes */ \"(ssr)/./node_modules/dns-packet/optioncodes.js\");\nconst ip = __webpack_require__(/*! @leichtgewicht/ip-codec */ \"(ssr)/./node_modules/@leichtgewicht/ip-codec/index.cjs\");\nconst QUERY_FLAG = 0;\nconst RESPONSE_FLAG = 1 << 15;\nconst FLUSH_MASK = 1 << 15;\nconst NOT_FLUSH_MASK = ~FLUSH_MASK;\nconst QU_MASK = 1 << 15;\nconst NOT_QU_MASK = ~QU_MASK;\nconst name = exports.name = {};\nname.encode = function(str, buf, offset, { mail = false } = {}) {\n    if (!buf) buf = Buffer.alloc(name.encodingLength(str));\n    if (!offset) offset = 0;\n    const oldOffset = offset;\n    // strip leading and trailing .\n    const n = str.replace(/^\\.|\\.$/gm, \"\");\n    if (n.length) {\n        let list = [];\n        if (mail) {\n            let localPart = \"\";\n            n.split(\".\").forEach((label)=>{\n                if (label.endsWith(\"\\\\\")) {\n                    localPart += (localPart.length ? \".\" : \"\") + label.slice(0, -1);\n                } else {\n                    if (list.length === 0 && localPart.length) {\n                        list.push(localPart + \".\" + label);\n                    } else {\n                        list.push(label);\n                    }\n                }\n            });\n        } else {\n            list = n.split(\".\");\n        }\n        for(let i = 0; i < list.length; i++){\n            const len = buf.write(list[i], offset + 1);\n            buf[offset] = len;\n            offset += len + 1;\n        }\n    }\n    buf[offset++] = 0;\n    name.encode.bytes = offset - oldOffset;\n    return buf;\n};\nname.encode.bytes = 0;\nname.decode = function(buf, offset, { mail = false } = {}) {\n    if (!offset) offset = 0;\n    const list = [];\n    let oldOffset = offset;\n    let totalLength = 0;\n    let consumedBytes = 0;\n    let jumped = false;\n    while(true){\n        if (offset >= buf.length) {\n            throw new Error(\"Cannot decode name (buffer overflow)\");\n        }\n        const len = buf[offset++];\n        consumedBytes += jumped ? 0 : 1;\n        if (len === 0) {\n            break;\n        } else if ((len & 0xc0) === 0) {\n            if (offset + len > buf.length) {\n                throw new Error(\"Cannot decode name (buffer overflow)\");\n            }\n            totalLength += len + 1;\n            if (totalLength > 254) {\n                throw new Error(\"Cannot decode name (name too long)\");\n            }\n            let label = buf.toString(\"utf-8\", offset, offset + len);\n            if (mail) {\n                label = label.replace(/\\./g, \"\\\\.\");\n            }\n            list.push(label);\n            offset += len;\n            consumedBytes += jumped ? 0 : len;\n        } else if ((len & 0xc0) === 0xc0) {\n            if (offset + 1 > buf.length) {\n                throw new Error(\"Cannot decode name (buffer overflow)\");\n            }\n            const jumpOffset = buf.readUInt16BE(offset - 1) - 0xc000;\n            if (jumpOffset >= oldOffset) {\n                // Allow only pointers to prior data. RFC 1035, section 4.1.4 states:\n                // \"[...] an entire domain name or a list of labels at the end of a domain name\n                // is replaced with a pointer to a prior occurance (sic) of the same name.\"\n                throw new Error(\"Cannot decode name (bad pointer)\");\n            }\n            offset = jumpOffset;\n            oldOffset = jumpOffset;\n            consumedBytes += jumped ? 0 : 1;\n            jumped = true;\n        } else {\n            throw new Error(\"Cannot decode name (bad label)\");\n        }\n    }\n    name.decode.bytes = consumedBytes;\n    return list.length === 0 ? \".\" : list.join(\".\");\n};\nname.decode.bytes = 0;\nname.encodingLength = function(n) {\n    if (n === \".\" || n === \"..\") return 1;\n    return Buffer.byteLength(n.replace(/^\\.|\\.$/gm, \"\")) + 2;\n};\nconst string = {};\nstring.encode = function(s, buf, offset) {\n    if (!buf) buf = Buffer.alloc(string.encodingLength(s));\n    if (!offset) offset = 0;\n    const len = buf.write(s, offset + 1);\n    buf[offset] = len;\n    string.encode.bytes = len + 1;\n    return buf;\n};\nstring.encode.bytes = 0;\nstring.decode = function(buf, offset) {\n    if (!offset) offset = 0;\n    const len = buf[offset];\n    const s = buf.toString(\"utf-8\", offset + 1, offset + 1 + len);\n    string.decode.bytes = len + 1;\n    return s;\n};\nstring.decode.bytes = 0;\nstring.encodingLength = function(s) {\n    return Buffer.byteLength(s) + 1;\n};\nconst header = {};\nheader.encode = function(h, buf, offset) {\n    if (!buf) buf = header.encodingLength(h);\n    if (!offset) offset = 0;\n    const flags = (h.flags || 0) & 32767;\n    const type = h.type === \"response\" ? RESPONSE_FLAG : QUERY_FLAG;\n    buf.writeUInt16BE(h.id || 0, offset);\n    buf.writeUInt16BE(flags | type, offset + 2);\n    buf.writeUInt16BE(h.questions.length, offset + 4);\n    buf.writeUInt16BE(h.answers.length, offset + 6);\n    buf.writeUInt16BE(h.authorities.length, offset + 8);\n    buf.writeUInt16BE(h.additionals.length, offset + 10);\n    return buf;\n};\nheader.encode.bytes = 12;\nheader.decode = function(buf, offset) {\n    if (!offset) offset = 0;\n    if (buf.length < 12) throw new Error(\"Header must be 12 bytes\");\n    const flags = buf.readUInt16BE(offset + 2);\n    return {\n        id: buf.readUInt16BE(offset),\n        type: flags & RESPONSE_FLAG ? \"response\" : \"query\",\n        flags: flags & 32767,\n        flag_qr: (flags >> 15 & 0x1) === 1,\n        opcode: opcodes.toString(flags >> 11 & 0xf),\n        flag_aa: (flags >> 10 & 0x1) === 1,\n        flag_tc: (flags >> 9 & 0x1) === 1,\n        flag_rd: (flags >> 8 & 0x1) === 1,\n        flag_ra: (flags >> 7 & 0x1) === 1,\n        flag_z: (flags >> 6 & 0x1) === 1,\n        flag_ad: (flags >> 5 & 0x1) === 1,\n        flag_cd: (flags >> 4 & 0x1) === 1,\n        rcode: rcodes.toString(flags & 0xf),\n        questions: new Array(buf.readUInt16BE(offset + 4)),\n        answers: new Array(buf.readUInt16BE(offset + 6)),\n        authorities: new Array(buf.readUInt16BE(offset + 8)),\n        additionals: new Array(buf.readUInt16BE(offset + 10))\n    };\n};\nheader.decode.bytes = 12;\nheader.encodingLength = function() {\n    return 12;\n};\nconst runknown = exports.unknown = {};\nrunknown.encode = function(data, buf, offset) {\n    if (!buf) buf = Buffer.alloc(runknown.encodingLength(data));\n    if (!offset) offset = 0;\n    buf.writeUInt16BE(data.length, offset);\n    data.copy(buf, offset + 2);\n    runknown.encode.bytes = data.length + 2;\n    return buf;\n};\nrunknown.encode.bytes = 0;\nrunknown.decode = function(buf, offset) {\n    if (!offset) offset = 0;\n    const len = buf.readUInt16BE(offset);\n    const data = buf.slice(offset + 2, offset + 2 + len);\n    runknown.decode.bytes = len + 2;\n    return data;\n};\nrunknown.decode.bytes = 0;\nrunknown.encodingLength = function(data) {\n    return data.length + 2;\n};\nconst rns = exports.ns = {};\nrns.encode = function(data, buf, offset) {\n    if (!buf) buf = Buffer.alloc(rns.encodingLength(data));\n    if (!offset) offset = 0;\n    name.encode(data, buf, offset + 2);\n    buf.writeUInt16BE(name.encode.bytes, offset);\n    rns.encode.bytes = name.encode.bytes + 2;\n    return buf;\n};\nrns.encode.bytes = 0;\nrns.decode = function(buf, offset) {\n    if (!offset) offset = 0;\n    const len = buf.readUInt16BE(offset);\n    const dd = name.decode(buf, offset + 2);\n    rns.decode.bytes = len + 2;\n    return dd;\n};\nrns.decode.bytes = 0;\nrns.encodingLength = function(data) {\n    return name.encodingLength(data) + 2;\n};\nconst rsoa = exports.soa = {};\nrsoa.encode = function(data, buf, offset) {\n    if (!buf) buf = Buffer.alloc(rsoa.encodingLength(data));\n    if (!offset) offset = 0;\n    const oldOffset = offset;\n    offset += 2;\n    name.encode(data.mname, buf, offset);\n    offset += name.encode.bytes;\n    name.encode(data.rname, buf, offset, {\n        mail: true\n    });\n    offset += name.encode.bytes;\n    buf.writeUInt32BE(data.serial || 0, offset);\n    offset += 4;\n    buf.writeUInt32BE(data.refresh || 0, offset);\n    offset += 4;\n    buf.writeUInt32BE(data.retry || 0, offset);\n    offset += 4;\n    buf.writeUInt32BE(data.expire || 0, offset);\n    offset += 4;\n    buf.writeUInt32BE(data.minimum || 0, offset);\n    offset += 4;\n    buf.writeUInt16BE(offset - oldOffset - 2, oldOffset);\n    rsoa.encode.bytes = offset - oldOffset;\n    return buf;\n};\nrsoa.encode.bytes = 0;\nrsoa.decode = function(buf, offset) {\n    if (!offset) offset = 0;\n    const oldOffset = offset;\n    const data = {};\n    offset += 2;\n    data.mname = name.decode(buf, offset);\n    offset += name.decode.bytes;\n    data.rname = name.decode(buf, offset, {\n        mail: true\n    });\n    offset += name.decode.bytes;\n    data.serial = buf.readUInt32BE(offset);\n    offset += 4;\n    data.refresh = buf.readUInt32BE(offset);\n    offset += 4;\n    data.retry = buf.readUInt32BE(offset);\n    offset += 4;\n    data.expire = buf.readUInt32BE(offset);\n    offset += 4;\n    data.minimum = buf.readUInt32BE(offset);\n    offset += 4;\n    rsoa.decode.bytes = offset - oldOffset;\n    return data;\n};\nrsoa.decode.bytes = 0;\nrsoa.encodingLength = function(data) {\n    return 22 + name.encodingLength(data.mname) + name.encodingLength(data.rname);\n};\nconst rtxt = exports.txt = {};\nrtxt.encode = function(data, buf, offset) {\n    if (!Array.isArray(data)) data = [\n        data\n    ];\n    for(let i = 0; i < data.length; i++){\n        if (typeof data[i] === \"string\") {\n            data[i] = Buffer.from(data[i]);\n        }\n        if (!Buffer.isBuffer(data[i])) {\n            throw new Error(\"Must be a Buffer\");\n        }\n    }\n    if (!buf) buf = Buffer.alloc(rtxt.encodingLength(data));\n    if (!offset) offset = 0;\n    const oldOffset = offset;\n    offset += 2;\n    data.forEach(function(d) {\n        buf[offset++] = d.length;\n        d.copy(buf, offset, 0, d.length);\n        offset += d.length;\n    });\n    buf.writeUInt16BE(offset - oldOffset - 2, oldOffset);\n    rtxt.encode.bytes = offset - oldOffset;\n    return buf;\n};\nrtxt.encode.bytes = 0;\nrtxt.decode = function(buf, offset) {\n    if (!offset) offset = 0;\n    const oldOffset = offset;\n    let remaining = buf.readUInt16BE(offset);\n    offset += 2;\n    let data = [];\n    while(remaining > 0){\n        const len = buf[offset++];\n        --remaining;\n        if (remaining < len) {\n            throw new Error(\"Buffer overflow\");\n        }\n        data.push(buf.slice(offset, offset + len));\n        offset += len;\n        remaining -= len;\n    }\n    rtxt.decode.bytes = offset - oldOffset;\n    return data;\n};\nrtxt.decode.bytes = 0;\nrtxt.encodingLength = function(data) {\n    if (!Array.isArray(data)) data = [\n        data\n    ];\n    let length = 2;\n    data.forEach(function(buf) {\n        if (typeof buf === \"string\") {\n            length += Buffer.byteLength(buf) + 1;\n        } else {\n            length += buf.length + 1;\n        }\n    });\n    return length;\n};\nconst rnull = exports[\"null\"] = {};\nrnull.encode = function(data, buf, offset) {\n    if (!buf) buf = Buffer.alloc(rnull.encodingLength(data));\n    if (!offset) offset = 0;\n    if (typeof data === \"string\") data = Buffer.from(data);\n    if (!data) data = Buffer.alloc(0);\n    const oldOffset = offset;\n    offset += 2;\n    const len = data.length;\n    data.copy(buf, offset, 0, len);\n    offset += len;\n    buf.writeUInt16BE(offset - oldOffset - 2, oldOffset);\n    rnull.encode.bytes = offset - oldOffset;\n    return buf;\n};\nrnull.encode.bytes = 0;\nrnull.decode = function(buf, offset) {\n    if (!offset) offset = 0;\n    const oldOffset = offset;\n    const len = buf.readUInt16BE(offset);\n    offset += 2;\n    const data = buf.slice(offset, offset + len);\n    offset += len;\n    rnull.decode.bytes = offset - oldOffset;\n    return data;\n};\nrnull.decode.bytes = 0;\nrnull.encodingLength = function(data) {\n    if (!data) return 2;\n    return (Buffer.isBuffer(data) ? data.length : Buffer.byteLength(data)) + 2;\n};\nconst rhinfo = exports.hinfo = {};\nrhinfo.encode = function(data, buf, offset) {\n    if (!buf) buf = Buffer.alloc(rhinfo.encodingLength(data));\n    if (!offset) offset = 0;\n    const oldOffset = offset;\n    offset += 2;\n    string.encode(data.cpu, buf, offset);\n    offset += string.encode.bytes;\n    string.encode(data.os, buf, offset);\n    offset += string.encode.bytes;\n    buf.writeUInt16BE(offset - oldOffset - 2, oldOffset);\n    rhinfo.encode.bytes = offset - oldOffset;\n    return buf;\n};\nrhinfo.encode.bytes = 0;\nrhinfo.decode = function(buf, offset) {\n    if (!offset) offset = 0;\n    const oldOffset = offset;\n    const data = {};\n    offset += 2;\n    data.cpu = string.decode(buf, offset);\n    offset += string.decode.bytes;\n    data.os = string.decode(buf, offset);\n    offset += string.decode.bytes;\n    rhinfo.decode.bytes = offset - oldOffset;\n    return data;\n};\nrhinfo.decode.bytes = 0;\nrhinfo.encodingLength = function(data) {\n    return string.encodingLength(data.cpu) + string.encodingLength(data.os) + 2;\n};\nconst rptr = exports.ptr = {};\nconst rcname = exports.cname = rptr;\nconst rdname = exports.dname = rptr;\nrptr.encode = function(data, buf, offset) {\n    if (!buf) buf = Buffer.alloc(rptr.encodingLength(data));\n    if (!offset) offset = 0;\n    name.encode(data, buf, offset + 2);\n    buf.writeUInt16BE(name.encode.bytes, offset);\n    rptr.encode.bytes = name.encode.bytes + 2;\n    return buf;\n};\nrptr.encode.bytes = 0;\nrptr.decode = function(buf, offset) {\n    if (!offset) offset = 0;\n    const data = name.decode(buf, offset + 2);\n    rptr.decode.bytes = name.decode.bytes + 2;\n    return data;\n};\nrptr.decode.bytes = 0;\nrptr.encodingLength = function(data) {\n    return name.encodingLength(data) + 2;\n};\nconst rsrv = exports.srv = {};\nrsrv.encode = function(data, buf, offset) {\n    if (!buf) buf = Buffer.alloc(rsrv.encodingLength(data));\n    if (!offset) offset = 0;\n    buf.writeUInt16BE(data.priority || 0, offset + 2);\n    buf.writeUInt16BE(data.weight || 0, offset + 4);\n    buf.writeUInt16BE(data.port || 0, offset + 6);\n    name.encode(data.target, buf, offset + 8);\n    const len = name.encode.bytes + 6;\n    buf.writeUInt16BE(len, offset);\n    rsrv.encode.bytes = len + 2;\n    return buf;\n};\nrsrv.encode.bytes = 0;\nrsrv.decode = function(buf, offset) {\n    if (!offset) offset = 0;\n    const len = buf.readUInt16BE(offset);\n    const data = {};\n    data.priority = buf.readUInt16BE(offset + 2);\n    data.weight = buf.readUInt16BE(offset + 4);\n    data.port = buf.readUInt16BE(offset + 6);\n    data.target = name.decode(buf, offset + 8);\n    rsrv.decode.bytes = len + 2;\n    return data;\n};\nrsrv.decode.bytes = 0;\nrsrv.encodingLength = function(data) {\n    return 8 + name.encodingLength(data.target);\n};\nconst rcaa = exports.caa = {};\nrcaa.ISSUER_CRITICAL = 1 << 7;\nrcaa.encode = function(data, buf, offset) {\n    const len = rcaa.encodingLength(data);\n    if (!buf) buf = Buffer.alloc(rcaa.encodingLength(data));\n    if (!offset) offset = 0;\n    if (data.issuerCritical) {\n        data.flags = rcaa.ISSUER_CRITICAL;\n    }\n    buf.writeUInt16BE(len - 2, offset);\n    offset += 2;\n    buf.writeUInt8(data.flags || 0, offset);\n    offset += 1;\n    string.encode(data.tag, buf, offset);\n    offset += string.encode.bytes;\n    buf.write(data.value, offset);\n    offset += Buffer.byteLength(data.value);\n    rcaa.encode.bytes = len;\n    return buf;\n};\nrcaa.encode.bytes = 0;\nrcaa.decode = function(buf, offset) {\n    if (!offset) offset = 0;\n    const len = buf.readUInt16BE(offset);\n    offset += 2;\n    const oldOffset = offset;\n    const data = {};\n    data.flags = buf.readUInt8(offset);\n    offset += 1;\n    data.tag = string.decode(buf, offset);\n    offset += string.decode.bytes;\n    data.value = buf.toString(\"utf-8\", offset, oldOffset + len);\n    data.issuerCritical = !!(data.flags & rcaa.ISSUER_CRITICAL);\n    rcaa.decode.bytes = len + 2;\n    return data;\n};\nrcaa.decode.bytes = 0;\nrcaa.encodingLength = function(data) {\n    return string.encodingLength(data.tag) + string.encodingLength(data.value) + 2;\n};\nconst rmx = exports.mx = {};\nrmx.encode = function(data, buf, offset) {\n    if (!buf) buf = Buffer.alloc(rmx.encodingLength(data));\n    if (!offset) offset = 0;\n    const oldOffset = offset;\n    offset += 2;\n    buf.writeUInt16BE(data.preference || 0, offset);\n    offset += 2;\n    name.encode(data.exchange, buf, offset);\n    offset += name.encode.bytes;\n    buf.writeUInt16BE(offset - oldOffset - 2, oldOffset);\n    rmx.encode.bytes = offset - oldOffset;\n    return buf;\n};\nrmx.encode.bytes = 0;\nrmx.decode = function(buf, offset) {\n    if (!offset) offset = 0;\n    const oldOffset = offset;\n    const data = {};\n    offset += 2;\n    data.preference = buf.readUInt16BE(offset);\n    offset += 2;\n    data.exchange = name.decode(buf, offset);\n    offset += name.decode.bytes;\n    rmx.decode.bytes = offset - oldOffset;\n    return data;\n};\nrmx.encodingLength = function(data) {\n    return 4 + name.encodingLength(data.exchange);\n};\nconst ra = exports.a = {};\nra.encode = function(host, buf, offset) {\n    if (!buf) buf = Buffer.alloc(ra.encodingLength(host));\n    if (!offset) offset = 0;\n    buf.writeUInt16BE(4, offset);\n    offset += 2;\n    ip.v4.encode(host, buf, offset);\n    ra.encode.bytes = 6;\n    return buf;\n};\nra.encode.bytes = 0;\nra.decode = function(buf, offset) {\n    if (!offset) offset = 0;\n    offset += 2;\n    const host = ip.v4.decode(buf, offset);\n    ra.decode.bytes = 6;\n    return host;\n};\nra.decode.bytes = 0;\nra.encodingLength = function() {\n    return 6;\n};\nconst raaaa = exports.aaaa = {};\nraaaa.encode = function(host, buf, offset) {\n    if (!buf) buf = Buffer.alloc(raaaa.encodingLength(host));\n    if (!offset) offset = 0;\n    buf.writeUInt16BE(16, offset);\n    offset += 2;\n    ip.v6.encode(host, buf, offset);\n    raaaa.encode.bytes = 18;\n    return buf;\n};\nraaaa.encode.bytes = 0;\nraaaa.decode = function(buf, offset) {\n    if (!offset) offset = 0;\n    offset += 2;\n    const host = ip.v6.decode(buf, offset);\n    raaaa.decode.bytes = 18;\n    return host;\n};\nraaaa.decode.bytes = 0;\nraaaa.encodingLength = function() {\n    return 18;\n};\nconst roption = exports.option = {};\nroption.encode = function(option, buf, offset) {\n    if (!buf) buf = Buffer.alloc(roption.encodingLength(option));\n    if (!offset) offset = 0;\n    const oldOffset = offset;\n    const code = optioncodes.toCode(option.code);\n    buf.writeUInt16BE(code, offset);\n    offset += 2;\n    if (option.data) {\n        buf.writeUInt16BE(option.data.length, offset);\n        offset += 2;\n        option.data.copy(buf, offset);\n        offset += option.data.length;\n    } else {\n        switch(code){\n            // case 3: NSID.  No encode makes sense.\n            // case 5,6,7: Not implementable\n            case 8:\n                // note: do IP math before calling\n                const spl = option.sourcePrefixLength || 0;\n                const fam = option.family || ip.familyOf(option.ip);\n                const ipBuf = ip.encode(option.ip, Buffer.alloc);\n                const ipLen = Math.ceil(spl / 8);\n                buf.writeUInt16BE(ipLen + 4, offset);\n                offset += 2;\n                buf.writeUInt16BE(fam, offset);\n                offset += 2;\n                buf.writeUInt8(spl, offset++);\n                buf.writeUInt8(option.scopePrefixLength || 0, offset++);\n                ipBuf.copy(buf, offset, 0, ipLen);\n                offset += ipLen;\n                break;\n            // case 9: EXPIRE (experimental)\n            // case 10: COOKIE.  No encode makes sense.\n            case 11:\n                if (option.timeout) {\n                    buf.writeUInt16BE(2, offset);\n                    offset += 2;\n                    buf.writeUInt16BE(option.timeout, offset);\n                    offset += 2;\n                } else {\n                    buf.writeUInt16BE(0, offset);\n                    offset += 2;\n                }\n                break;\n            case 12:\n                const len = option.length || 0;\n                buf.writeUInt16BE(len, offset);\n                offset += 2;\n                buf.fill(0, offset, offset + len);\n                offset += len;\n                break;\n            // case 13:  CHAIN.  Experimental.\n            case 14:\n                const tagsLen = option.tags.length * 2;\n                buf.writeUInt16BE(tagsLen, offset);\n                offset += 2;\n                for (const tag of option.tags){\n                    buf.writeUInt16BE(tag, offset);\n                    offset += 2;\n                }\n                break;\n            default:\n                throw new Error(`Unknown roption code: ${option.code}`);\n        }\n    }\n    roption.encode.bytes = offset - oldOffset;\n    return buf;\n};\nroption.encode.bytes = 0;\nroption.decode = function(buf, offset) {\n    if (!offset) offset = 0;\n    const option = {};\n    option.code = buf.readUInt16BE(offset);\n    option.type = optioncodes.toString(option.code);\n    offset += 2;\n    const len = buf.readUInt16BE(offset);\n    offset += 2;\n    option.data = buf.slice(offset, offset + len);\n    switch(option.code){\n        // case 3: NSID.  No decode makes sense.\n        case 8:\n            option.family = buf.readUInt16BE(offset);\n            offset += 2;\n            option.sourcePrefixLength = buf.readUInt8(offset++);\n            option.scopePrefixLength = buf.readUInt8(offset++);\n            const padded = Buffer.alloc(option.family === 1 ? 4 : 16);\n            buf.copy(padded, 0, offset, offset + len - 4);\n            option.ip = ip.decode(padded);\n            break;\n        // case 12: Padding.  No decode makes sense.\n        case 11:\n            if (len > 0) {\n                option.timeout = buf.readUInt16BE(offset);\n                offset += 2;\n            }\n            break;\n        case 14:\n            option.tags = [];\n            for(let i = 0; i < len; i += 2){\n                option.tags.push(buf.readUInt16BE(offset));\n                offset += 2;\n            }\n    }\n    roption.decode.bytes = len + 4;\n    return option;\n};\nroption.decode.bytes = 0;\nroption.encodingLength = function(option) {\n    if (option.data) {\n        return option.data.length + 4;\n    }\n    const code = optioncodes.toCode(option.code);\n    switch(code){\n        case 8:\n            const spl = option.sourcePrefixLength || 0;\n            return Math.ceil(spl / 8) + 8;\n        case 11:\n            return typeof option.timeout === \"number\" ? 6 : 4;\n        case 12:\n            return option.length + 4;\n        case 14:\n            return 4 + option.tags.length * 2;\n    }\n    throw new Error(`Unknown roption code: ${option.code}`);\n};\nconst ropt = exports.opt = {};\nropt.encode = function(options, buf, offset) {\n    if (!buf) buf = Buffer.alloc(ropt.encodingLength(options));\n    if (!offset) offset = 0;\n    const oldOffset = offset;\n    const rdlen = encodingLengthList(options, roption);\n    buf.writeUInt16BE(rdlen, offset);\n    offset = encodeList(options, roption, buf, offset + 2);\n    ropt.encode.bytes = offset - oldOffset;\n    return buf;\n};\nropt.encode.bytes = 0;\nropt.decode = function(buf, offset) {\n    if (!offset) offset = 0;\n    const oldOffset = offset;\n    const options = [];\n    let rdlen = buf.readUInt16BE(offset);\n    offset += 2;\n    let o = 0;\n    while(rdlen > 0){\n        options[o++] = roption.decode(buf, offset);\n        offset += roption.decode.bytes;\n        rdlen -= roption.decode.bytes;\n    }\n    ropt.decode.bytes = offset - oldOffset;\n    return options;\n};\nropt.decode.bytes = 0;\nropt.encodingLength = function(options) {\n    return 2 + encodingLengthList(options || [], roption);\n};\nconst rdnskey = exports.dnskey = {};\nrdnskey.PROTOCOL_DNSSEC = 3;\nrdnskey.ZONE_KEY = 0x80;\nrdnskey.SECURE_ENTRYPOINT = 0x8000;\nrdnskey.encode = function(key, buf, offset) {\n    if (!buf) buf = Buffer.alloc(rdnskey.encodingLength(key));\n    if (!offset) offset = 0;\n    const oldOffset = offset;\n    const keydata = key.key;\n    if (!Buffer.isBuffer(keydata)) {\n        throw new Error(\"Key must be a Buffer\");\n    }\n    offset += 2 // Leave space for length\n    ;\n    buf.writeUInt16BE(key.flags, offset);\n    offset += 2;\n    buf.writeUInt8(rdnskey.PROTOCOL_DNSSEC, offset);\n    offset += 1;\n    buf.writeUInt8(key.algorithm, offset);\n    offset += 1;\n    keydata.copy(buf, offset, 0, keydata.length);\n    offset += keydata.length;\n    rdnskey.encode.bytes = offset - oldOffset;\n    buf.writeUInt16BE(rdnskey.encode.bytes - 2, oldOffset);\n    return buf;\n};\nrdnskey.encode.bytes = 0;\nrdnskey.decode = function(buf, offset) {\n    if (!offset) offset = 0;\n    const oldOffset = offset;\n    var key = {};\n    var length = buf.readUInt16BE(offset);\n    offset += 2;\n    key.flags = buf.readUInt16BE(offset);\n    offset += 2;\n    if (buf.readUInt8(offset) !== rdnskey.PROTOCOL_DNSSEC) {\n        throw new Error(\"Protocol must be 3\");\n    }\n    offset += 1;\n    key.algorithm = buf.readUInt8(offset);\n    offset += 1;\n    key.key = buf.slice(offset, oldOffset + length + 2);\n    offset += key.key.length;\n    rdnskey.decode.bytes = offset - oldOffset;\n    return key;\n};\nrdnskey.decode.bytes = 0;\nrdnskey.encodingLength = function(key) {\n    return 6 + Buffer.byteLength(key.key);\n};\nconst rrrsig = exports.rrsig = {};\nrrrsig.encode = function(sig, buf, offset) {\n    if (!buf) buf = Buffer.alloc(rrrsig.encodingLength(sig));\n    if (!offset) offset = 0;\n    const oldOffset = offset;\n    const signature = sig.signature;\n    if (!Buffer.isBuffer(signature)) {\n        throw new Error(\"Signature must be a Buffer\");\n    }\n    offset += 2 // Leave space for length\n    ;\n    buf.writeUInt16BE(types.toType(sig.typeCovered), offset);\n    offset += 2;\n    buf.writeUInt8(sig.algorithm, offset);\n    offset += 1;\n    buf.writeUInt8(sig.labels, offset);\n    offset += 1;\n    buf.writeUInt32BE(sig.originalTTL, offset);\n    offset += 4;\n    buf.writeUInt32BE(sig.expiration, offset);\n    offset += 4;\n    buf.writeUInt32BE(sig.inception, offset);\n    offset += 4;\n    buf.writeUInt16BE(sig.keyTag, offset);\n    offset += 2;\n    name.encode(sig.signersName, buf, offset);\n    offset += name.encode.bytes;\n    signature.copy(buf, offset, 0, signature.length);\n    offset += signature.length;\n    rrrsig.encode.bytes = offset - oldOffset;\n    buf.writeUInt16BE(rrrsig.encode.bytes - 2, oldOffset);\n    return buf;\n};\nrrrsig.encode.bytes = 0;\nrrrsig.decode = function(buf, offset) {\n    if (!offset) offset = 0;\n    const oldOffset = offset;\n    var sig = {};\n    var length = buf.readUInt16BE(offset);\n    offset += 2;\n    sig.typeCovered = types.toString(buf.readUInt16BE(offset));\n    offset += 2;\n    sig.algorithm = buf.readUInt8(offset);\n    offset += 1;\n    sig.labels = buf.readUInt8(offset);\n    offset += 1;\n    sig.originalTTL = buf.readUInt32BE(offset);\n    offset += 4;\n    sig.expiration = buf.readUInt32BE(offset);\n    offset += 4;\n    sig.inception = buf.readUInt32BE(offset);\n    offset += 4;\n    sig.keyTag = buf.readUInt16BE(offset);\n    offset += 2;\n    sig.signersName = name.decode(buf, offset);\n    offset += name.decode.bytes;\n    sig.signature = buf.slice(offset, oldOffset + length + 2);\n    offset += sig.signature.length;\n    rrrsig.decode.bytes = offset - oldOffset;\n    return sig;\n};\nrrrsig.decode.bytes = 0;\nrrrsig.encodingLength = function(sig) {\n    return 20 + name.encodingLength(sig.signersName) + Buffer.byteLength(sig.signature);\n};\nconst rrp = exports.rp = {};\nrrp.encode = function(data, buf, offset) {\n    if (!buf) buf = Buffer.alloc(rrp.encodingLength(data));\n    if (!offset) offset = 0;\n    const oldOffset = offset;\n    offset += 2 // Leave space for length\n    ;\n    name.encode(data.mbox || \".\", buf, offset, {\n        mail: true\n    });\n    offset += name.encode.bytes;\n    name.encode(data.txt || \".\", buf, offset);\n    offset += name.encode.bytes;\n    rrp.encode.bytes = offset - oldOffset;\n    buf.writeUInt16BE(rrp.encode.bytes - 2, oldOffset);\n    return buf;\n};\nrrp.encode.bytes = 0;\nrrp.decode = function(buf, offset) {\n    if (!offset) offset = 0;\n    const oldOffset = offset;\n    const data = {};\n    offset += 2;\n    data.mbox = name.decode(buf, offset, {\n        mail: true\n    }) || \".\";\n    offset += name.decode.bytes;\n    data.txt = name.decode(buf, offset) || \".\";\n    offset += name.decode.bytes;\n    rrp.decode.bytes = offset - oldOffset;\n    return data;\n};\nrrp.decode.bytes = 0;\nrrp.encodingLength = function(data) {\n    return 2 + name.encodingLength(data.mbox || \".\") + name.encodingLength(data.txt || \".\");\n};\nconst typebitmap = {};\ntypebitmap.encode = function(typelist, buf, offset) {\n    if (!buf) buf = Buffer.alloc(typebitmap.encodingLength(typelist));\n    if (!offset) offset = 0;\n    const oldOffset = offset;\n    var typesByWindow = [];\n    for(var i = 0; i < typelist.length; i++){\n        var typeid = types.toType(typelist[i]);\n        if (typesByWindow[typeid >> 8] === undefined) {\n            typesByWindow[typeid >> 8] = [];\n        }\n        typesByWindow[typeid >> 8][typeid >> 3 & 0x1F] |= 1 << 7 - (typeid & 0x7);\n    }\n    for(i = 0; i < typesByWindow.length; i++){\n        if (typesByWindow[i] !== undefined) {\n            var windowBuf = Buffer.from(typesByWindow[i]);\n            buf.writeUInt8(i, offset);\n            offset += 1;\n            buf.writeUInt8(windowBuf.length, offset);\n            offset += 1;\n            windowBuf.copy(buf, offset);\n            offset += windowBuf.length;\n        }\n    }\n    typebitmap.encode.bytes = offset - oldOffset;\n    return buf;\n};\ntypebitmap.encode.bytes = 0;\ntypebitmap.decode = function(buf, offset, length) {\n    if (!offset) offset = 0;\n    const oldOffset = offset;\n    var typelist = [];\n    while(offset - oldOffset < length){\n        var window = buf.readUInt8(offset);\n        offset += 1;\n        var windowLength = buf.readUInt8(offset);\n        offset += 1;\n        for(var i = 0; i < windowLength; i++){\n            var b = buf.readUInt8(offset + i);\n            for(var j = 0; j < 8; j++){\n                if (b & 1 << 7 - j) {\n                    var typeid = types.toString(window << 8 | i << 3 | j);\n                    typelist.push(typeid);\n                }\n            }\n        }\n        offset += windowLength;\n    }\n    typebitmap.decode.bytes = offset - oldOffset;\n    return typelist;\n};\ntypebitmap.decode.bytes = 0;\ntypebitmap.encodingLength = function(typelist) {\n    var extents = [];\n    for(var i = 0; i < typelist.length; i++){\n        var typeid = types.toType(typelist[i]);\n        extents[typeid >> 8] = Math.max(extents[typeid >> 8] || 0, typeid & 0xFF);\n    }\n    var len = 0;\n    for(i = 0; i < extents.length; i++){\n        if (extents[i] !== undefined) {\n            len += 2 + Math.ceil((extents[i] + 1) / 8);\n        }\n    }\n    return len;\n};\nconst rnsec = exports.nsec = {};\nrnsec.encode = function(record, buf, offset) {\n    if (!buf) buf = Buffer.alloc(rnsec.encodingLength(record));\n    if (!offset) offset = 0;\n    const oldOffset = offset;\n    offset += 2 // Leave space for length\n    ;\n    name.encode(record.nextDomain, buf, offset);\n    offset += name.encode.bytes;\n    typebitmap.encode(record.rrtypes, buf, offset);\n    offset += typebitmap.encode.bytes;\n    rnsec.encode.bytes = offset - oldOffset;\n    buf.writeUInt16BE(rnsec.encode.bytes - 2, oldOffset);\n    return buf;\n};\nrnsec.encode.bytes = 0;\nrnsec.decode = function(buf, offset) {\n    if (!offset) offset = 0;\n    const oldOffset = offset;\n    var record = {};\n    var length = buf.readUInt16BE(offset);\n    offset += 2;\n    record.nextDomain = name.decode(buf, offset);\n    offset += name.decode.bytes;\n    record.rrtypes = typebitmap.decode(buf, offset, length - (offset - oldOffset));\n    offset += typebitmap.decode.bytes;\n    rnsec.decode.bytes = offset - oldOffset;\n    return record;\n};\nrnsec.decode.bytes = 0;\nrnsec.encodingLength = function(record) {\n    return 2 + name.encodingLength(record.nextDomain) + typebitmap.encodingLength(record.rrtypes);\n};\nconst rnsec3 = exports.nsec3 = {};\nrnsec3.encode = function(record, buf, offset) {\n    if (!buf) buf = Buffer.alloc(rnsec3.encodingLength(record));\n    if (!offset) offset = 0;\n    const oldOffset = offset;\n    const salt = record.salt;\n    if (!Buffer.isBuffer(salt)) {\n        throw new Error(\"salt must be a Buffer\");\n    }\n    const nextDomain = record.nextDomain;\n    if (!Buffer.isBuffer(nextDomain)) {\n        throw new Error(\"nextDomain must be a Buffer\");\n    }\n    offset += 2 // Leave space for length\n    ;\n    buf.writeUInt8(record.algorithm, offset);\n    offset += 1;\n    buf.writeUInt8(record.flags, offset);\n    offset += 1;\n    buf.writeUInt16BE(record.iterations, offset);\n    offset += 2;\n    buf.writeUInt8(salt.length, offset);\n    offset += 1;\n    salt.copy(buf, offset, 0, salt.length);\n    offset += salt.length;\n    buf.writeUInt8(nextDomain.length, offset);\n    offset += 1;\n    nextDomain.copy(buf, offset, 0, nextDomain.length);\n    offset += nextDomain.length;\n    typebitmap.encode(record.rrtypes, buf, offset);\n    offset += typebitmap.encode.bytes;\n    rnsec3.encode.bytes = offset - oldOffset;\n    buf.writeUInt16BE(rnsec3.encode.bytes - 2, oldOffset);\n    return buf;\n};\nrnsec3.encode.bytes = 0;\nrnsec3.decode = function(buf, offset) {\n    if (!offset) offset = 0;\n    const oldOffset = offset;\n    var record = {};\n    var length = buf.readUInt16BE(offset);\n    offset += 2;\n    record.algorithm = buf.readUInt8(offset);\n    offset += 1;\n    record.flags = buf.readUInt8(offset);\n    offset += 1;\n    record.iterations = buf.readUInt16BE(offset);\n    offset += 2;\n    const saltLength = buf.readUInt8(offset);\n    offset += 1;\n    record.salt = buf.slice(offset, offset + saltLength);\n    offset += saltLength;\n    const hashLength = buf.readUInt8(offset);\n    offset += 1;\n    record.nextDomain = buf.slice(offset, offset + hashLength);\n    offset += hashLength;\n    record.rrtypes = typebitmap.decode(buf, offset, length - (offset - oldOffset));\n    offset += typebitmap.decode.bytes;\n    rnsec3.decode.bytes = offset - oldOffset;\n    return record;\n};\nrnsec3.decode.bytes = 0;\nrnsec3.encodingLength = function(record) {\n    return 8 + record.salt.length + record.nextDomain.length + typebitmap.encodingLength(record.rrtypes);\n};\nconst rds = exports.ds = {};\nrds.encode = function(digest, buf, offset) {\n    if (!buf) buf = Buffer.alloc(rds.encodingLength(digest));\n    if (!offset) offset = 0;\n    const oldOffset = offset;\n    const digestdata = digest.digest;\n    if (!Buffer.isBuffer(digestdata)) {\n        throw new Error(\"Digest must be a Buffer\");\n    }\n    offset += 2 // Leave space for length\n    ;\n    buf.writeUInt16BE(digest.keyTag, offset);\n    offset += 2;\n    buf.writeUInt8(digest.algorithm, offset);\n    offset += 1;\n    buf.writeUInt8(digest.digestType, offset);\n    offset += 1;\n    digestdata.copy(buf, offset, 0, digestdata.length);\n    offset += digestdata.length;\n    rds.encode.bytes = offset - oldOffset;\n    buf.writeUInt16BE(rds.encode.bytes - 2, oldOffset);\n    return buf;\n};\nrds.encode.bytes = 0;\nrds.decode = function(buf, offset) {\n    if (!offset) offset = 0;\n    const oldOffset = offset;\n    var digest = {};\n    var length = buf.readUInt16BE(offset);\n    offset += 2;\n    digest.keyTag = buf.readUInt16BE(offset);\n    offset += 2;\n    digest.algorithm = buf.readUInt8(offset);\n    offset += 1;\n    digest.digestType = buf.readUInt8(offset);\n    offset += 1;\n    digest.digest = buf.slice(offset, oldOffset + length + 2);\n    offset += digest.digest.length;\n    rds.decode.bytes = offset - oldOffset;\n    return digest;\n};\nrds.decode.bytes = 0;\nrds.encodingLength = function(digest) {\n    return 6 + Buffer.byteLength(digest.digest);\n};\nconst rsshfp = exports.sshfp = {};\nrsshfp.getFingerprintLengthForHashType = function getFingerprintLengthForHashType(hashType) {\n    switch(hashType){\n        case 1:\n            return 20;\n        case 2:\n            return 32;\n    }\n};\nrsshfp.encode = function encode(record, buf, offset) {\n    if (!buf) buf = Buffer.alloc(rsshfp.encodingLength(record));\n    if (!offset) offset = 0;\n    const oldOffset = offset;\n    offset += 2 // The function call starts with the offset pointer at the RDLENGTH field, not the RDATA one\n    ;\n    buf[offset] = record.algorithm;\n    offset += 1;\n    buf[offset] = record.hash;\n    offset += 1;\n    const fingerprintBuf = Buffer.from(record.fingerprint.toUpperCase(), \"hex\");\n    if (fingerprintBuf.length !== rsshfp.getFingerprintLengthForHashType(record.hash)) {\n        throw new Error(\"Invalid fingerprint length\");\n    }\n    fingerprintBuf.copy(buf, offset);\n    offset += fingerprintBuf.byteLength;\n    rsshfp.encode.bytes = offset - oldOffset;\n    buf.writeUInt16BE(rsshfp.encode.bytes - 2, oldOffset);\n    return buf;\n};\nrsshfp.encode.bytes = 0;\nrsshfp.decode = function decode(buf, offset) {\n    if (!offset) offset = 0;\n    const oldOffset = offset;\n    const record = {};\n    offset += 2 // Account for the RDLENGTH field\n    ;\n    record.algorithm = buf[offset];\n    offset += 1;\n    record.hash = buf[offset];\n    offset += 1;\n    const fingerprintLength = rsshfp.getFingerprintLengthForHashType(record.hash);\n    record.fingerprint = buf.slice(offset, offset + fingerprintLength).toString(\"hex\").toUpperCase();\n    offset += fingerprintLength;\n    rsshfp.decode.bytes = offset - oldOffset;\n    return record;\n};\nrsshfp.decode.bytes = 0;\nrsshfp.encodingLength = function(record) {\n    return 4 + Buffer.from(record.fingerprint, \"hex\").byteLength;\n};\nconst rnaptr = exports.naptr = {};\nrnaptr.encode = function(data, buf, offset) {\n    if (!buf) buf = Buffer.alloc(rnaptr.encodingLength(data));\n    if (!offset) offset = 0;\n    const oldOffset = offset;\n    offset += 2;\n    buf.writeUInt16BE(data.order || 0, offset);\n    offset += 2;\n    buf.writeUInt16BE(data.preference || 0, offset);\n    offset += 2;\n    string.encode(data.flags, buf, offset);\n    offset += string.encode.bytes;\n    string.encode(data.services, buf, offset);\n    offset += string.encode.bytes;\n    string.encode(data.regexp, buf, offset);\n    offset += string.encode.bytes;\n    name.encode(data.replacement, buf, offset);\n    offset += name.encode.bytes;\n    rnaptr.encode.bytes = offset - oldOffset;\n    buf.writeUInt16BE(rnaptr.encode.bytes - 2, oldOffset);\n    return buf;\n};\nrnaptr.encode.bytes = 0;\nrnaptr.decode = function(buf, offset) {\n    if (!offset) offset = 0;\n    const oldOffset = offset;\n    const data = {};\n    offset += 2;\n    data.order = buf.readUInt16BE(offset);\n    offset += 2;\n    data.preference = buf.readUInt16BE(offset);\n    offset += 2;\n    data.flags = string.decode(buf, offset);\n    offset += string.decode.bytes;\n    data.services = string.decode(buf, offset);\n    offset += string.decode.bytes;\n    data.regexp = string.decode(buf, offset);\n    offset += string.decode.bytes;\n    data.replacement = name.decode(buf, offset);\n    offset += name.decode.bytes;\n    rnaptr.decode.bytes = offset - oldOffset;\n    return data;\n};\nrnaptr.decode.bytes = 0;\nrnaptr.encodingLength = function(data) {\n    return string.encodingLength(data.flags) + string.encodingLength(data.services) + string.encodingLength(data.regexp) + name.encodingLength(data.replacement) + 6;\n};\nconst rtlsa = exports.tlsa = {};\nrtlsa.encode = function(cert, buf, offset) {\n    if (!buf) buf = Buffer.alloc(rtlsa.encodingLength(cert));\n    if (!offset) offset = 0;\n    const oldOffset = offset;\n    const certdata = cert.certificate;\n    if (!Buffer.isBuffer(certdata)) {\n        throw new Error(\"Certificate must be a Buffer\");\n    }\n    offset += 2 // Leave space for length\n    ;\n    buf.writeUInt8(cert.usage, offset);\n    offset += 1;\n    buf.writeUInt8(cert.selector, offset);\n    offset += 1;\n    buf.writeUInt8(cert.matchingType, offset);\n    offset += 1;\n    certdata.copy(buf, offset, 0, certdata.length);\n    offset += certdata.length;\n    rtlsa.encode.bytes = offset - oldOffset;\n    buf.writeUInt16BE(rtlsa.encode.bytes - 2, oldOffset);\n    return buf;\n};\nrtlsa.encode.bytes = 0;\nrtlsa.decode = function(buf, offset) {\n    if (!offset) offset = 0;\n    const oldOffset = offset;\n    const cert = {};\n    const length = buf.readUInt16BE(offset);\n    offset += 2;\n    cert.usage = buf.readUInt8(offset);\n    offset += 1;\n    cert.selector = buf.readUInt8(offset);\n    offset += 1;\n    cert.matchingType = buf.readUInt8(offset);\n    offset += 1;\n    cert.certificate = buf.slice(offset, oldOffset + length + 2);\n    offset += cert.certificate.length;\n    rtlsa.decode.bytes = offset - oldOffset;\n    return cert;\n};\nrtlsa.decode.bytes = 0;\nrtlsa.encodingLength = function(cert) {\n    return 5 + Buffer.byteLength(cert.certificate);\n};\nconst renc = exports.record = function(type) {\n    switch(type.toUpperCase()){\n        case \"A\":\n            return ra;\n        case \"PTR\":\n            return rptr;\n        case \"CNAME\":\n            return rcname;\n        case \"DNAME\":\n            return rdname;\n        case \"TXT\":\n            return rtxt;\n        case \"NULL\":\n            return rnull;\n        case \"AAAA\":\n            return raaaa;\n        case \"SRV\":\n            return rsrv;\n        case \"HINFO\":\n            return rhinfo;\n        case \"CAA\":\n            return rcaa;\n        case \"NS\":\n            return rns;\n        case \"SOA\":\n            return rsoa;\n        case \"MX\":\n            return rmx;\n        case \"OPT\":\n            return ropt;\n        case \"DNSKEY\":\n            return rdnskey;\n        case \"RRSIG\":\n            return rrrsig;\n        case \"RP\":\n            return rrp;\n        case \"NSEC\":\n            return rnsec;\n        case \"NSEC3\":\n            return rnsec3;\n        case \"SSHFP\":\n            return rsshfp;\n        case \"DS\":\n            return rds;\n        case \"NAPTR\":\n            return rnaptr;\n        case \"TLSA\":\n            return rtlsa;\n    }\n    return runknown;\n};\nconst answer = exports.answer = {};\nanswer.encode = function(a, buf, offset) {\n    if (!buf) buf = Buffer.alloc(answer.encodingLength(a));\n    if (!offset) offset = 0;\n    const oldOffset = offset;\n    name.encode(a.name, buf, offset);\n    offset += name.encode.bytes;\n    buf.writeUInt16BE(types.toType(a.type), offset);\n    if (a.type.toUpperCase() === \"OPT\") {\n        if (a.name !== \".\") {\n            throw new Error(\"OPT name must be root.\");\n        }\n        buf.writeUInt16BE(a.udpPayloadSize || 4096, offset + 2);\n        buf.writeUInt8(a.extendedRcode || 0, offset + 4);\n        buf.writeUInt8(a.ednsVersion || 0, offset + 5);\n        buf.writeUInt16BE(a.flags || 0, offset + 6);\n        offset += 8;\n        ropt.encode(a.options || [], buf, offset);\n        offset += ropt.encode.bytes;\n    } else {\n        let klass = classes.toClass(a.class === undefined ? \"IN\" : a.class);\n        if (a.flush) klass |= FLUSH_MASK // the 1st bit of the class is the flush bit\n        ;\n        buf.writeUInt16BE(klass, offset + 2);\n        buf.writeUInt32BE(a.ttl || 0, offset + 4);\n        offset += 8;\n        const enc = renc(a.type);\n        enc.encode(a.data, buf, offset);\n        offset += enc.encode.bytes;\n    }\n    answer.encode.bytes = offset - oldOffset;\n    return buf;\n};\nanswer.encode.bytes = 0;\nanswer.decode = function(buf, offset) {\n    if (!offset) offset = 0;\n    const a = {};\n    const oldOffset = offset;\n    a.name = name.decode(buf, offset);\n    offset += name.decode.bytes;\n    a.type = types.toString(buf.readUInt16BE(offset));\n    if (a.type === \"OPT\") {\n        a.udpPayloadSize = buf.readUInt16BE(offset + 2);\n        a.extendedRcode = buf.readUInt8(offset + 4);\n        a.ednsVersion = buf.readUInt8(offset + 5);\n        a.flags = buf.readUInt16BE(offset + 6);\n        a.flag_do = (a.flags >> 15 & 0x1) === 1;\n        a.options = ropt.decode(buf, offset + 8);\n        offset += 8 + ropt.decode.bytes;\n    } else {\n        const klass = buf.readUInt16BE(offset + 2);\n        a.ttl = buf.readUInt32BE(offset + 4);\n        a.class = classes.toString(klass & NOT_FLUSH_MASK);\n        a.flush = !!(klass & FLUSH_MASK);\n        const enc = renc(a.type);\n        a.data = enc.decode(buf, offset + 8);\n        offset += 8 + enc.decode.bytes;\n    }\n    answer.decode.bytes = offset - oldOffset;\n    return a;\n};\nanswer.decode.bytes = 0;\nanswer.encodingLength = function(a) {\n    const data = a.data !== null && a.data !== undefined ? a.data : a.options;\n    return name.encodingLength(a.name) + 8 + renc(a.type).encodingLength(data);\n};\nconst question = exports.question = {};\nquestion.encode = function(q, buf, offset) {\n    if (!buf) buf = Buffer.alloc(question.encodingLength(q));\n    if (!offset) offset = 0;\n    const oldOffset = offset;\n    name.encode(q.name, buf, offset);\n    offset += name.encode.bytes;\n    buf.writeUInt16BE(types.toType(q.type), offset);\n    offset += 2;\n    buf.writeUInt16BE(classes.toClass(q.class === undefined ? \"IN\" : q.class), offset);\n    offset += 2;\n    question.encode.bytes = offset - oldOffset;\n    return q;\n};\nquestion.encode.bytes = 0;\nquestion.decode = function(buf, offset) {\n    if (!offset) offset = 0;\n    const oldOffset = offset;\n    const q = {};\n    q.name = name.decode(buf, offset);\n    offset += name.decode.bytes;\n    q.type = types.toString(buf.readUInt16BE(offset));\n    offset += 2;\n    q.class = classes.toString(buf.readUInt16BE(offset));\n    offset += 2;\n    const qu = !!(q.class & QU_MASK);\n    if (qu) q.class &= NOT_QU_MASK;\n    question.decode.bytes = offset - oldOffset;\n    return q;\n};\nquestion.decode.bytes = 0;\nquestion.encodingLength = function(q) {\n    return name.encodingLength(q.name) + 4;\n};\nexports.AUTHORITATIVE_ANSWER = 1 << 10;\nexports.TRUNCATED_RESPONSE = 1 << 9;\nexports.RECURSION_DESIRED = 1 << 8;\nexports.RECURSION_AVAILABLE = 1 << 7;\nexports.AUTHENTIC_DATA = 1 << 5;\nexports.CHECKING_DISABLED = 1 << 4;\nexports.DNSSEC_OK = 1 << 15;\nexports.encode = function(result, buf, offset) {\n    const allocing = !buf;\n    if (allocing) buf = Buffer.alloc(exports.encodingLength(result));\n    if (!offset) offset = 0;\n    const oldOffset = offset;\n    if (!result.questions) result.questions = [];\n    if (!result.answers) result.answers = [];\n    if (!result.authorities) result.authorities = [];\n    if (!result.additionals) result.additionals = [];\n    header.encode(result, buf, offset);\n    offset += header.encode.bytes;\n    offset = encodeList(result.questions, question, buf, offset);\n    offset = encodeList(result.answers, answer, buf, offset);\n    offset = encodeList(result.authorities, answer, buf, offset);\n    offset = encodeList(result.additionals, answer, buf, offset);\n    exports.encode.bytes = offset - oldOffset;\n    // just a quick sanity check\n    if (allocing && exports.encode.bytes !== buf.length) {\n        return buf.slice(0, exports.encode.bytes);\n    }\n    return buf;\n};\nexports.encode.bytes = 0;\nexports.decode = function(buf, offset) {\n    if (!offset) offset = 0;\n    const oldOffset = offset;\n    const result = header.decode(buf, offset);\n    offset += header.decode.bytes;\n    offset = decodeList(result.questions, question, buf, offset);\n    offset = decodeList(result.answers, answer, buf, offset);\n    offset = decodeList(result.authorities, answer, buf, offset);\n    offset = decodeList(result.additionals, answer, buf, offset);\n    exports.decode.bytes = offset - oldOffset;\n    return result;\n};\nexports.decode.bytes = 0;\nexports.encodingLength = function(result) {\n    return header.encodingLength(result) + encodingLengthList(result.questions || [], question) + encodingLengthList(result.answers || [], answer) + encodingLengthList(result.authorities || [], answer) + encodingLengthList(result.additionals || [], answer);\n};\nexports.streamEncode = function(result) {\n    const buf = exports.encode(result);\n    const sbuf = Buffer.alloc(2);\n    sbuf.writeUInt16BE(buf.byteLength);\n    const combine = Buffer.concat([\n        sbuf,\n        buf\n    ]);\n    exports.streamEncode.bytes = combine.byteLength;\n    return combine;\n};\nexports.streamEncode.bytes = 0;\nexports.streamDecode = function(sbuf) {\n    const len = sbuf.readUInt16BE(0);\n    if (sbuf.byteLength < len + 2) {\n        // not enough data\n        return null;\n    }\n    const result = exports.decode(sbuf.slice(2));\n    exports.streamDecode.bytes = exports.decode.bytes;\n    return result;\n};\nexports.streamDecode.bytes = 0;\nfunction encodingLengthList(list, enc) {\n    let len = 0;\n    for(let i = 0; i < list.length; i++)len += enc.encodingLength(list[i]);\n    return len;\n}\nfunction encodeList(list, enc, buf, offset) {\n    for(let i = 0; i < list.length; i++){\n        enc.encode(list[i], buf, offset);\n        offset += enc.encode.bytes;\n    }\n    return offset;\n}\nfunction decodeList(list, enc, buf, offset) {\n    for(let i = 0; i < list.length; i++){\n        list[i] = enc.decode(buf, offset);\n        offset += enc.decode.bytes;\n    }\n    return offset;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/dns-packet/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/dns-packet/opcodes.js":
/*!********************************************!*\
  !*** ./node_modules/dns-packet/opcodes.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Traditional DNS header OPCODEs (4-bits) defined by IANA in\n * https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-5\n */ exports.toString = function(opcode) {\n    switch(opcode){\n        case 0:\n            return \"QUERY\";\n        case 1:\n            return \"IQUERY\";\n        case 2:\n            return \"STATUS\";\n        case 3:\n            return \"OPCODE_3\";\n        case 4:\n            return \"NOTIFY\";\n        case 5:\n            return \"UPDATE\";\n        case 6:\n            return \"OPCODE_6\";\n        case 7:\n            return \"OPCODE_7\";\n        case 8:\n            return \"OPCODE_8\";\n        case 9:\n            return \"OPCODE_9\";\n        case 10:\n            return \"OPCODE_10\";\n        case 11:\n            return \"OPCODE_11\";\n        case 12:\n            return \"OPCODE_12\";\n        case 13:\n            return \"OPCODE_13\";\n        case 14:\n            return \"OPCODE_14\";\n        case 15:\n            return \"OPCODE_15\";\n    }\n    return \"OPCODE_\" + opcode;\n};\nexports.toOpcode = function(code) {\n    switch(code.toUpperCase()){\n        case \"QUERY\":\n            return 0;\n        case \"IQUERY\":\n            return 1;\n        case \"STATUS\":\n            return 2;\n        case \"OPCODE_3\":\n            return 3;\n        case \"NOTIFY\":\n            return 4;\n        case \"UPDATE\":\n            return 5;\n        case \"OPCODE_6\":\n            return 6;\n        case \"OPCODE_7\":\n            return 7;\n        case \"OPCODE_8\":\n            return 8;\n        case \"OPCODE_9\":\n            return 9;\n        case \"OPCODE_10\":\n            return 10;\n        case \"OPCODE_11\":\n            return 11;\n        case \"OPCODE_12\":\n            return 12;\n        case \"OPCODE_13\":\n            return 13;\n        case \"OPCODE_14\":\n            return 14;\n        case \"OPCODE_15\":\n            return 15;\n    }\n    return 0;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZG5zLXBhY2tldC9vcGNvZGVzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUE7OztDQUdDLEdBRURBLGdCQUFnQixHQUFHLFNBQVVFLE1BQU07SUFDakMsT0FBUUE7UUFDTixLQUFLO1lBQUcsT0FBTztRQUNmLEtBQUs7WUFBRyxPQUFPO1FBQ2YsS0FBSztZQUFHLE9BQU87UUFDZixLQUFLO1lBQUcsT0FBTztRQUNmLEtBQUs7WUFBRyxPQUFPO1FBQ2YsS0FBSztZQUFHLE9BQU87UUFDZixLQUFLO1lBQUcsT0FBTztRQUNmLEtBQUs7WUFBRyxPQUFPO1FBQ2YsS0FBSztZQUFHLE9BQU87UUFDZixLQUFLO1lBQUcsT0FBTztRQUNmLEtBQUs7WUFBSSxPQUFPO1FBQ2hCLEtBQUs7WUFBSSxPQUFPO1FBQ2hCLEtBQUs7WUFBSSxPQUFPO1FBQ2hCLEtBQUs7WUFBSSxPQUFPO1FBQ2hCLEtBQUs7WUFBSSxPQUFPO1FBQ2hCLEtBQUs7WUFBSSxPQUFPO0lBQ2xCO0lBQ0EsT0FBTyxZQUFZQTtBQUNyQjtBQUVBRixnQkFBZ0IsR0FBRyxTQUFVSSxJQUFJO0lBQy9CLE9BQVFBLEtBQUtDLFdBQVc7UUFDdEIsS0FBSztZQUFTLE9BQU87UUFDckIsS0FBSztZQUFVLE9BQU87UUFDdEIsS0FBSztZQUFVLE9BQU87UUFDdEIsS0FBSztZQUFZLE9BQU87UUFDeEIsS0FBSztZQUFVLE9BQU87UUFDdEIsS0FBSztZQUFVLE9BQU87UUFDdEIsS0FBSztZQUFZLE9BQU87UUFDeEIsS0FBSztZQUFZLE9BQU87UUFDeEIsS0FBSztZQUFZLE9BQU87UUFDeEIsS0FBSztZQUFZLE9BQU87UUFDeEIsS0FBSztZQUFhLE9BQU87UUFDekIsS0FBSztZQUFhLE9BQU87UUFDekIsS0FBSztZQUFhLE9BQU87UUFDekIsS0FBSztZQUFhLE9BQU87UUFDekIsS0FBSztZQUFhLE9BQU87UUFDekIsS0FBSztZQUFhLE9BQU87SUFDM0I7SUFDQSxPQUFPO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb2JpbGUvLi9ub2RlX21vZHVsZXMvZG5zLXBhY2tldC9vcGNvZGVzLmpzPzY5ODEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbi8qXG4gKiBUcmFkaXRpb25hbCBETlMgaGVhZGVyIE9QQ09ERXMgKDQtYml0cykgZGVmaW5lZCBieSBJQU5BIGluXG4gKiBodHRwczovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy9kbnMtcGFyYW1ldGVycy9kbnMtcGFyYW1ldGVycy54aHRtbCNkbnMtcGFyYW1ldGVycy01XG4gKi9cblxuZXhwb3J0cy50b1N0cmluZyA9IGZ1bmN0aW9uIChvcGNvZGUpIHtcbiAgc3dpdGNoIChvcGNvZGUpIHtcbiAgICBjYXNlIDA6IHJldHVybiAnUVVFUlknXG4gICAgY2FzZSAxOiByZXR1cm4gJ0lRVUVSWSdcbiAgICBjYXNlIDI6IHJldHVybiAnU1RBVFVTJ1xuICAgIGNhc2UgMzogcmV0dXJuICdPUENPREVfMydcbiAgICBjYXNlIDQ6IHJldHVybiAnTk9USUZZJ1xuICAgIGNhc2UgNTogcmV0dXJuICdVUERBVEUnXG4gICAgY2FzZSA2OiByZXR1cm4gJ09QQ09ERV82J1xuICAgIGNhc2UgNzogcmV0dXJuICdPUENPREVfNydcbiAgICBjYXNlIDg6IHJldHVybiAnT1BDT0RFXzgnXG4gICAgY2FzZSA5OiByZXR1cm4gJ09QQ09ERV85J1xuICAgIGNhc2UgMTA6IHJldHVybiAnT1BDT0RFXzEwJ1xuICAgIGNhc2UgMTE6IHJldHVybiAnT1BDT0RFXzExJ1xuICAgIGNhc2UgMTI6IHJldHVybiAnT1BDT0RFXzEyJ1xuICAgIGNhc2UgMTM6IHJldHVybiAnT1BDT0RFXzEzJ1xuICAgIGNhc2UgMTQ6IHJldHVybiAnT1BDT0RFXzE0J1xuICAgIGNhc2UgMTU6IHJldHVybiAnT1BDT0RFXzE1J1xuICB9XG4gIHJldHVybiAnT1BDT0RFXycgKyBvcGNvZGVcbn1cblxuZXhwb3J0cy50b09wY29kZSA9IGZ1bmN0aW9uIChjb2RlKSB7XG4gIHN3aXRjaCAoY29kZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgY2FzZSAnUVVFUlknOiByZXR1cm4gMFxuICAgIGNhc2UgJ0lRVUVSWSc6IHJldHVybiAxXG4gICAgY2FzZSAnU1RBVFVTJzogcmV0dXJuIDJcbiAgICBjYXNlICdPUENPREVfMyc6IHJldHVybiAzXG4gICAgY2FzZSAnTk9USUZZJzogcmV0dXJuIDRcbiAgICBjYXNlICdVUERBVEUnOiByZXR1cm4gNVxuICAgIGNhc2UgJ09QQ09ERV82JzogcmV0dXJuIDZcbiAgICBjYXNlICdPUENPREVfNyc6IHJldHVybiA3XG4gICAgY2FzZSAnT1BDT0RFXzgnOiByZXR1cm4gOFxuICAgIGNhc2UgJ09QQ09ERV85JzogcmV0dXJuIDlcbiAgICBjYXNlICdPUENPREVfMTAnOiByZXR1cm4gMTBcbiAgICBjYXNlICdPUENPREVfMTEnOiByZXR1cm4gMTFcbiAgICBjYXNlICdPUENPREVfMTInOiByZXR1cm4gMTJcbiAgICBjYXNlICdPUENPREVfMTMnOiByZXR1cm4gMTNcbiAgICBjYXNlICdPUENPREVfMTQnOiByZXR1cm4gMTRcbiAgICBjYXNlICdPUENPREVfMTUnOiByZXR1cm4gMTVcbiAgfVxuICByZXR1cm4gMFxufVxuIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJ0b1N0cmluZyIsIm9wY29kZSIsInRvT3Bjb2RlIiwiY29kZSIsInRvVXBwZXJDYXNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/dns-packet/opcodes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/dns-packet/optioncodes.js":
/*!************************************************!*\
  !*** ./node_modules/dns-packet/optioncodes.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nexports.toString = function(type) {\n    switch(type){\n        // list at\n        // https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-11\n        case 1:\n            return \"LLQ\";\n        case 2:\n            return \"UL\";\n        case 3:\n            return \"NSID\";\n        case 5:\n            return \"DAU\";\n        case 6:\n            return \"DHU\";\n        case 7:\n            return \"N3U\";\n        case 8:\n            return \"CLIENT_SUBNET\";\n        case 9:\n            return \"EXPIRE\";\n        case 10:\n            return \"COOKIE\";\n        case 11:\n            return \"TCP_KEEPALIVE\";\n        case 12:\n            return \"PADDING\";\n        case 13:\n            return \"CHAIN\";\n        case 14:\n            return \"KEY_TAG\";\n        case 26946:\n            return \"DEVICEID\";\n    }\n    if (type < 0) {\n        return null;\n    }\n    return `OPTION_${type}`;\n};\nexports.toCode = function(name) {\n    if (typeof name === \"number\") {\n        return name;\n    }\n    if (!name) {\n        return -1;\n    }\n    switch(name.toUpperCase()){\n        case \"OPTION_0\":\n            return 0;\n        case \"LLQ\":\n            return 1;\n        case \"UL\":\n            return 2;\n        case \"NSID\":\n            return 3;\n        case \"OPTION_4\":\n            return 4;\n        case \"DAU\":\n            return 5;\n        case \"DHU\":\n            return 6;\n        case \"N3U\":\n            return 7;\n        case \"CLIENT_SUBNET\":\n            return 8;\n        case \"EXPIRE\":\n            return 9;\n        case \"COOKIE\":\n            return 10;\n        case \"TCP_KEEPALIVE\":\n            return 11;\n        case \"PADDING\":\n            return 12;\n        case \"CHAIN\":\n            return 13;\n        case \"KEY_TAG\":\n            return 14;\n        case \"DEVICEID\":\n            return 26946;\n        case \"OPTION_65535\":\n            return 65535;\n    }\n    const m = name.match(/_(\\d+)$/);\n    if (m) {\n        return parseInt(m[1], 10);\n    }\n    return -1;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZG5zLXBhY2tldC9vcHRpb25jb2Rlcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSxnQkFBZ0IsR0FBRyxTQUFVRSxJQUFJO0lBQy9CLE9BQVFBO1FBQ04sVUFBVTtRQUNWLHlGQUF5RjtRQUN6RixLQUFLO1lBQUcsT0FBTztRQUNmLEtBQUs7WUFBRyxPQUFPO1FBQ2YsS0FBSztZQUFHLE9BQU87UUFDZixLQUFLO1lBQUcsT0FBTztRQUNmLEtBQUs7WUFBRyxPQUFPO1FBQ2YsS0FBSztZQUFHLE9BQU87UUFDZixLQUFLO1lBQUcsT0FBTztRQUNmLEtBQUs7WUFBRyxPQUFPO1FBQ2YsS0FBSztZQUFJLE9BQU87UUFDaEIsS0FBSztZQUFJLE9BQU87UUFDaEIsS0FBSztZQUFJLE9BQU87UUFDaEIsS0FBSztZQUFJLE9BQU87UUFDaEIsS0FBSztZQUFJLE9BQU87UUFDaEIsS0FBSztZQUFPLE9BQU87SUFDckI7SUFDQSxJQUFJQSxPQUFPLEdBQUc7UUFDWixPQUFPO0lBQ1Q7SUFDQSxPQUFPLENBQUMsT0FBTyxFQUFFQSxLQUFLLENBQUM7QUFDekI7QUFFQUYsY0FBYyxHQUFHLFNBQVVJLElBQUk7SUFDN0IsSUFBSSxPQUFPQSxTQUFTLFVBQVU7UUFDNUIsT0FBT0E7SUFDVDtJQUNBLElBQUksQ0FBQ0EsTUFBTTtRQUNULE9BQU8sQ0FBQztJQUNWO0lBQ0EsT0FBUUEsS0FBS0MsV0FBVztRQUN0QixLQUFLO1lBQVksT0FBTztRQUN4QixLQUFLO1lBQU8sT0FBTztRQUNuQixLQUFLO1lBQU0sT0FBTztRQUNsQixLQUFLO1lBQVEsT0FBTztRQUNwQixLQUFLO1lBQVksT0FBTztRQUN4QixLQUFLO1lBQU8sT0FBTztRQUNuQixLQUFLO1lBQU8sT0FBTztRQUNuQixLQUFLO1lBQU8sT0FBTztRQUNuQixLQUFLO1lBQWlCLE9BQU87UUFDN0IsS0FBSztZQUFVLE9BQU87UUFDdEIsS0FBSztZQUFVLE9BQU87UUFDdEIsS0FBSztZQUFpQixPQUFPO1FBQzdCLEtBQUs7WUFBVyxPQUFPO1FBQ3ZCLEtBQUs7WUFBUyxPQUFPO1FBQ3JCLEtBQUs7WUFBVyxPQUFPO1FBQ3ZCLEtBQUs7WUFBWSxPQUFPO1FBQ3hCLEtBQUs7WUFBZ0IsT0FBTztJQUM5QjtJQUNBLE1BQU1DLElBQUlGLEtBQUtHLEtBQUssQ0FBQztJQUNyQixJQUFJRCxHQUFHO1FBQ0wsT0FBT0UsU0FBU0YsQ0FBQyxDQUFDLEVBQUUsRUFBRTtJQUN4QjtJQUNBLE9BQU8sQ0FBQztBQUNWIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbW9iaWxlLy4vbm9kZV9tb2R1bGVzL2Rucy1wYWNrZXQvb3B0aW9uY29kZXMuanM/ZjA5MyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuZXhwb3J0cy50b1N0cmluZyA9IGZ1bmN0aW9uICh0eXBlKSB7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIC8vIGxpc3QgYXRcbiAgICAvLyBodHRwczovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy9kbnMtcGFyYW1ldGVycy9kbnMtcGFyYW1ldGVycy54aHRtbCNkbnMtcGFyYW1ldGVycy0xMVxuICAgIGNhc2UgMTogcmV0dXJuICdMTFEnXG4gICAgY2FzZSAyOiByZXR1cm4gJ1VMJ1xuICAgIGNhc2UgMzogcmV0dXJuICdOU0lEJ1xuICAgIGNhc2UgNTogcmV0dXJuICdEQVUnXG4gICAgY2FzZSA2OiByZXR1cm4gJ0RIVSdcbiAgICBjYXNlIDc6IHJldHVybiAnTjNVJ1xuICAgIGNhc2UgODogcmV0dXJuICdDTElFTlRfU1VCTkVUJ1xuICAgIGNhc2UgOTogcmV0dXJuICdFWFBJUkUnXG4gICAgY2FzZSAxMDogcmV0dXJuICdDT09LSUUnXG4gICAgY2FzZSAxMTogcmV0dXJuICdUQ1BfS0VFUEFMSVZFJ1xuICAgIGNhc2UgMTI6IHJldHVybiAnUEFERElORydcbiAgICBjYXNlIDEzOiByZXR1cm4gJ0NIQUlOJ1xuICAgIGNhc2UgMTQ6IHJldHVybiAnS0VZX1RBRydcbiAgICBjYXNlIDI2OTQ2OiByZXR1cm4gJ0RFVklDRUlEJ1xuICB9XG4gIGlmICh0eXBlIDwgMCkge1xuICAgIHJldHVybiBudWxsXG4gIH1cbiAgcmV0dXJuIGBPUFRJT05fJHt0eXBlfWBcbn1cblxuZXhwb3J0cy50b0NvZGUgPSBmdW5jdGlvbiAobmFtZSkge1xuICBpZiAodHlwZW9mIG5hbWUgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIG5hbWVcbiAgfVxuICBpZiAoIW5hbWUpIHtcbiAgICByZXR1cm4gLTFcbiAgfVxuICBzd2l0Y2ggKG5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgIGNhc2UgJ09QVElPTl8wJzogcmV0dXJuIDBcbiAgICBjYXNlICdMTFEnOiByZXR1cm4gMVxuICAgIGNhc2UgJ1VMJzogcmV0dXJuIDJcbiAgICBjYXNlICdOU0lEJzogcmV0dXJuIDNcbiAgICBjYXNlICdPUFRJT05fNCc6IHJldHVybiA0XG4gICAgY2FzZSAnREFVJzogcmV0dXJuIDVcbiAgICBjYXNlICdESFUnOiByZXR1cm4gNlxuICAgIGNhc2UgJ04zVSc6IHJldHVybiA3XG4gICAgY2FzZSAnQ0xJRU5UX1NVQk5FVCc6IHJldHVybiA4XG4gICAgY2FzZSAnRVhQSVJFJzogcmV0dXJuIDlcbiAgICBjYXNlICdDT09LSUUnOiByZXR1cm4gMTBcbiAgICBjYXNlICdUQ1BfS0VFUEFMSVZFJzogcmV0dXJuIDExXG4gICAgY2FzZSAnUEFERElORyc6IHJldHVybiAxMlxuICAgIGNhc2UgJ0NIQUlOJzogcmV0dXJuIDEzXG4gICAgY2FzZSAnS0VZX1RBRyc6IHJldHVybiAxNFxuICAgIGNhc2UgJ0RFVklDRUlEJzogcmV0dXJuIDI2OTQ2XG4gICAgY2FzZSAnT1BUSU9OXzY1NTM1JzogcmV0dXJuIDY1NTM1XG4gIH1cbiAgY29uc3QgbSA9IG5hbWUubWF0Y2goL18oXFxkKykkLylcbiAgaWYgKG0pIHtcbiAgICByZXR1cm4gcGFyc2VJbnQobVsxXSwgMTApXG4gIH1cbiAgcmV0dXJuIC0xXG59XG4iXSwibmFtZXMiOlsiZXhwb3J0cyIsInRvU3RyaW5nIiwidHlwZSIsInRvQ29kZSIsIm5hbWUiLCJ0b1VwcGVyQ2FzZSIsIm0iLCJtYXRjaCIsInBhcnNlSW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/dns-packet/optioncodes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/dns-packet/rcodes.js":
/*!*******************************************!*\
  !*** ./node_modules/dns-packet/rcodes.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Traditional DNS header RCODEs (4-bits) defined by IANA in\n * https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml\n */ exports.toString = function(rcode) {\n    switch(rcode){\n        case 0:\n            return \"NOERROR\";\n        case 1:\n            return \"FORMERR\";\n        case 2:\n            return \"SERVFAIL\";\n        case 3:\n            return \"NXDOMAIN\";\n        case 4:\n            return \"NOTIMP\";\n        case 5:\n            return \"REFUSED\";\n        case 6:\n            return \"YXDOMAIN\";\n        case 7:\n            return \"YXRRSET\";\n        case 8:\n            return \"NXRRSET\";\n        case 9:\n            return \"NOTAUTH\";\n        case 10:\n            return \"NOTZONE\";\n        case 11:\n            return \"RCODE_11\";\n        case 12:\n            return \"RCODE_12\";\n        case 13:\n            return \"RCODE_13\";\n        case 14:\n            return \"RCODE_14\";\n        case 15:\n            return \"RCODE_15\";\n    }\n    return \"RCODE_\" + rcode;\n};\nexports.toRcode = function(code) {\n    switch(code.toUpperCase()){\n        case \"NOERROR\":\n            return 0;\n        case \"FORMERR\":\n            return 1;\n        case \"SERVFAIL\":\n            return 2;\n        case \"NXDOMAIN\":\n            return 3;\n        case \"NOTIMP\":\n            return 4;\n        case \"REFUSED\":\n            return 5;\n        case \"YXDOMAIN\":\n            return 6;\n        case \"YXRRSET\":\n            return 7;\n        case \"NXRRSET\":\n            return 8;\n        case \"NOTAUTH\":\n            return 9;\n        case \"NOTZONE\":\n            return 10;\n        case \"RCODE_11\":\n            return 11;\n        case \"RCODE_12\":\n            return 12;\n        case \"RCODE_13\":\n            return 13;\n        case \"RCODE_14\":\n            return 14;\n        case \"RCODE_15\":\n            return 15;\n    }\n    return 0;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZG5zLXBhY2tldC9yY29kZXMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQTs7O0NBR0MsR0FFREEsZ0JBQWdCLEdBQUcsU0FBVUUsS0FBSztJQUNoQyxPQUFRQTtRQUNOLEtBQUs7WUFBRyxPQUFPO1FBQ2YsS0FBSztZQUFHLE9BQU87UUFDZixLQUFLO1lBQUcsT0FBTztRQUNmLEtBQUs7WUFBRyxPQUFPO1FBQ2YsS0FBSztZQUFHLE9BQU87UUFDZixLQUFLO1lBQUcsT0FBTztRQUNmLEtBQUs7WUFBRyxPQUFPO1FBQ2YsS0FBSztZQUFHLE9BQU87UUFDZixLQUFLO1lBQUcsT0FBTztRQUNmLEtBQUs7WUFBRyxPQUFPO1FBQ2YsS0FBSztZQUFJLE9BQU87UUFDaEIsS0FBSztZQUFJLE9BQU87UUFDaEIsS0FBSztZQUFJLE9BQU87UUFDaEIsS0FBSztZQUFJLE9BQU87UUFDaEIsS0FBSztZQUFJLE9BQU87UUFDaEIsS0FBSztZQUFJLE9BQU87SUFDbEI7SUFDQSxPQUFPLFdBQVdBO0FBQ3BCO0FBRUFGLGVBQWUsR0FBRyxTQUFVSSxJQUFJO0lBQzlCLE9BQVFBLEtBQUtDLFdBQVc7UUFDdEIsS0FBSztZQUFXLE9BQU87UUFDdkIsS0FBSztZQUFXLE9BQU87UUFDdkIsS0FBSztZQUFZLE9BQU87UUFDeEIsS0FBSztZQUFZLE9BQU87UUFDeEIsS0FBSztZQUFVLE9BQU87UUFDdEIsS0FBSztZQUFXLE9BQU87UUFDdkIsS0FBSztZQUFZLE9BQU87UUFDeEIsS0FBSztZQUFXLE9BQU87UUFDdkIsS0FBSztZQUFXLE9BQU87UUFDdkIsS0FBSztZQUFXLE9BQU87UUFDdkIsS0FBSztZQUFXLE9BQU87UUFDdkIsS0FBSztZQUFZLE9BQU87UUFDeEIsS0FBSztZQUFZLE9BQU87UUFDeEIsS0FBSztZQUFZLE9BQU87UUFDeEIsS0FBSztZQUFZLE9BQU87UUFDeEIsS0FBSztZQUFZLE9BQU87SUFDMUI7SUFDQSxPQUFPO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb2JpbGUvLi9ub2RlX21vZHVsZXMvZG5zLXBhY2tldC9yY29kZXMuanM/MTBhZCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuLypcbiAqIFRyYWRpdGlvbmFsIEROUyBoZWFkZXIgUkNPREVzICg0LWJpdHMpIGRlZmluZWQgYnkgSUFOQSBpblxuICogaHR0cHM6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvZG5zLXBhcmFtZXRlcnMvZG5zLXBhcmFtZXRlcnMueGh0bWxcbiAqL1xuXG5leHBvcnRzLnRvU3RyaW5nID0gZnVuY3Rpb24gKHJjb2RlKSB7XG4gIHN3aXRjaCAocmNvZGUpIHtcbiAgICBjYXNlIDA6IHJldHVybiAnTk9FUlJPUidcbiAgICBjYXNlIDE6IHJldHVybiAnRk9STUVSUidcbiAgICBjYXNlIDI6IHJldHVybiAnU0VSVkZBSUwnXG4gICAgY2FzZSAzOiByZXR1cm4gJ05YRE9NQUlOJ1xuICAgIGNhc2UgNDogcmV0dXJuICdOT1RJTVAnXG4gICAgY2FzZSA1OiByZXR1cm4gJ1JFRlVTRUQnXG4gICAgY2FzZSA2OiByZXR1cm4gJ1lYRE9NQUlOJ1xuICAgIGNhc2UgNzogcmV0dXJuICdZWFJSU0VUJ1xuICAgIGNhc2UgODogcmV0dXJuICdOWFJSU0VUJ1xuICAgIGNhc2UgOTogcmV0dXJuICdOT1RBVVRIJ1xuICAgIGNhc2UgMTA6IHJldHVybiAnTk9UWk9ORSdcbiAgICBjYXNlIDExOiByZXR1cm4gJ1JDT0RFXzExJ1xuICAgIGNhc2UgMTI6IHJldHVybiAnUkNPREVfMTInXG4gICAgY2FzZSAxMzogcmV0dXJuICdSQ09ERV8xMydcbiAgICBjYXNlIDE0OiByZXR1cm4gJ1JDT0RFXzE0J1xuICAgIGNhc2UgMTU6IHJldHVybiAnUkNPREVfMTUnXG4gIH1cbiAgcmV0dXJuICdSQ09ERV8nICsgcmNvZGVcbn1cblxuZXhwb3J0cy50b1Jjb2RlID0gZnVuY3Rpb24gKGNvZGUpIHtcbiAgc3dpdGNoIChjb2RlLnRvVXBwZXJDYXNlKCkpIHtcbiAgICBjYXNlICdOT0VSUk9SJzogcmV0dXJuIDBcbiAgICBjYXNlICdGT1JNRVJSJzogcmV0dXJuIDFcbiAgICBjYXNlICdTRVJWRkFJTCc6IHJldHVybiAyXG4gICAgY2FzZSAnTlhET01BSU4nOiByZXR1cm4gM1xuICAgIGNhc2UgJ05PVElNUCc6IHJldHVybiA0XG4gICAgY2FzZSAnUkVGVVNFRCc6IHJldHVybiA1XG4gICAgY2FzZSAnWVhET01BSU4nOiByZXR1cm4gNlxuICAgIGNhc2UgJ1lYUlJTRVQnOiByZXR1cm4gN1xuICAgIGNhc2UgJ05YUlJTRVQnOiByZXR1cm4gOFxuICAgIGNhc2UgJ05PVEFVVEgnOiByZXR1cm4gOVxuICAgIGNhc2UgJ05PVFpPTkUnOiByZXR1cm4gMTBcbiAgICBjYXNlICdSQ09ERV8xMSc6IHJldHVybiAxMVxuICAgIGNhc2UgJ1JDT0RFXzEyJzogcmV0dXJuIDEyXG4gICAgY2FzZSAnUkNPREVfMTMnOiByZXR1cm4gMTNcbiAgICBjYXNlICdSQ09ERV8xNCc6IHJldHVybiAxNFxuICAgIGNhc2UgJ1JDT0RFXzE1JzogcmV0dXJuIDE1XG4gIH1cbiAgcmV0dXJuIDBcbn1cbiJdLCJuYW1lcyI6WyJleHBvcnRzIiwidG9TdHJpbmciLCJyY29kZSIsInRvUmNvZGUiLCJjb2RlIiwidG9VcHBlckNhc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/dns-packet/rcodes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/dns-packet/types.js":
/*!******************************************!*\
  !*** ./node_modules/dns-packet/types.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nexports.toString = function(type) {\n    switch(type){\n        case 1:\n            return \"A\";\n        case 10:\n            return \"NULL\";\n        case 28:\n            return \"AAAA\";\n        case 18:\n            return \"AFSDB\";\n        case 42:\n            return \"APL\";\n        case 257:\n            return \"CAA\";\n        case 60:\n            return \"CDNSKEY\";\n        case 59:\n            return \"CDS\";\n        case 37:\n            return \"CERT\";\n        case 5:\n            return \"CNAME\";\n        case 49:\n            return \"DHCID\";\n        case 32769:\n            return \"DLV\";\n        case 39:\n            return \"DNAME\";\n        case 48:\n            return \"DNSKEY\";\n        case 43:\n            return \"DS\";\n        case 55:\n            return \"HIP\";\n        case 13:\n            return \"HINFO\";\n        case 45:\n            return \"IPSECKEY\";\n        case 25:\n            return \"KEY\";\n        case 36:\n            return \"KX\";\n        case 29:\n            return \"LOC\";\n        case 15:\n            return \"MX\";\n        case 35:\n            return \"NAPTR\";\n        case 2:\n            return \"NS\";\n        case 47:\n            return \"NSEC\";\n        case 50:\n            return \"NSEC3\";\n        case 51:\n            return \"NSEC3PARAM\";\n        case 12:\n            return \"PTR\";\n        case 46:\n            return \"RRSIG\";\n        case 17:\n            return \"RP\";\n        case 24:\n            return \"SIG\";\n        case 6:\n            return \"SOA\";\n        case 99:\n            return \"SPF\";\n        case 33:\n            return \"SRV\";\n        case 44:\n            return \"SSHFP\";\n        case 32768:\n            return \"TA\";\n        case 249:\n            return \"TKEY\";\n        case 52:\n            return \"TLSA\";\n        case 250:\n            return \"TSIG\";\n        case 16:\n            return \"TXT\";\n        case 252:\n            return \"AXFR\";\n        case 251:\n            return \"IXFR\";\n        case 41:\n            return \"OPT\";\n        case 255:\n            return \"ANY\";\n    }\n    return \"UNKNOWN_\" + type;\n};\nexports.toType = function(name) {\n    switch(name.toUpperCase()){\n        case \"A\":\n            return 1;\n        case \"NULL\":\n            return 10;\n        case \"AAAA\":\n            return 28;\n        case \"AFSDB\":\n            return 18;\n        case \"APL\":\n            return 42;\n        case \"CAA\":\n            return 257;\n        case \"CDNSKEY\":\n            return 60;\n        case \"CDS\":\n            return 59;\n        case \"CERT\":\n            return 37;\n        case \"CNAME\":\n            return 5;\n        case \"DHCID\":\n            return 49;\n        case \"DLV\":\n            return 32769;\n        case \"DNAME\":\n            return 39;\n        case \"DNSKEY\":\n            return 48;\n        case \"DS\":\n            return 43;\n        case \"HIP\":\n            return 55;\n        case \"HINFO\":\n            return 13;\n        case \"IPSECKEY\":\n            return 45;\n        case \"KEY\":\n            return 25;\n        case \"KX\":\n            return 36;\n        case \"LOC\":\n            return 29;\n        case \"MX\":\n            return 15;\n        case \"NAPTR\":\n            return 35;\n        case \"NS\":\n            return 2;\n        case \"NSEC\":\n            return 47;\n        case \"NSEC3\":\n            return 50;\n        case \"NSEC3PARAM\":\n            return 51;\n        case \"PTR\":\n            return 12;\n        case \"RRSIG\":\n            return 46;\n        case \"RP\":\n            return 17;\n        case \"SIG\":\n            return 24;\n        case \"SOA\":\n            return 6;\n        case \"SPF\":\n            return 99;\n        case \"SRV\":\n            return 33;\n        case \"SSHFP\":\n            return 44;\n        case \"TA\":\n            return 32768;\n        case \"TKEY\":\n            return 249;\n        case \"TLSA\":\n            return 52;\n        case \"TSIG\":\n            return 250;\n        case \"TXT\":\n            return 16;\n        case \"AXFR\":\n            return 252;\n        case \"IXFR\":\n            return 251;\n        case \"OPT\":\n            return 41;\n        case \"ANY\":\n            return 255;\n        case \"*\":\n            return 255;\n    }\n    if (name.toUpperCase().startsWith(\"UNKNOWN_\")) return parseInt(name.slice(8));\n    return 0;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZG5zLXBhY2tldC90eXBlcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSxnQkFBZ0IsR0FBRyxTQUFVRSxJQUFJO0lBQy9CLE9BQVFBO1FBQ04sS0FBSztZQUFHLE9BQU87UUFDZixLQUFLO1lBQUksT0FBTztRQUNoQixLQUFLO1lBQUksT0FBTztRQUNoQixLQUFLO1lBQUksT0FBTztRQUNoQixLQUFLO1lBQUksT0FBTztRQUNoQixLQUFLO1lBQUssT0FBTztRQUNqQixLQUFLO1lBQUksT0FBTztRQUNoQixLQUFLO1lBQUksT0FBTztRQUNoQixLQUFLO1lBQUksT0FBTztRQUNoQixLQUFLO1lBQUcsT0FBTztRQUNmLEtBQUs7WUFBSSxPQUFPO1FBQ2hCLEtBQUs7WUFBTyxPQUFPO1FBQ25CLEtBQUs7WUFBSSxPQUFPO1FBQ2hCLEtBQUs7WUFBSSxPQUFPO1FBQ2hCLEtBQUs7WUFBSSxPQUFPO1FBQ2hCLEtBQUs7WUFBSSxPQUFPO1FBQ2hCLEtBQUs7WUFBSSxPQUFPO1FBQ2hCLEtBQUs7WUFBSSxPQUFPO1FBQ2hCLEtBQUs7WUFBSSxPQUFPO1FBQ2hCLEtBQUs7WUFBSSxPQUFPO1FBQ2hCLEtBQUs7WUFBSSxPQUFPO1FBQ2hCLEtBQUs7WUFBSSxPQUFPO1FBQ2hCLEtBQUs7WUFBSSxPQUFPO1FBQ2hCLEtBQUs7WUFBRyxPQUFPO1FBQ2YsS0FBSztZQUFJLE9BQU87UUFDaEIsS0FBSztZQUFJLE9BQU87UUFDaEIsS0FBSztZQUFJLE9BQU87UUFDaEIsS0FBSztZQUFJLE9BQU87UUFDaEIsS0FBSztZQUFJLE9BQU87UUFDaEIsS0FBSztZQUFJLE9BQU87UUFDaEIsS0FBSztZQUFJLE9BQU87UUFDaEIsS0FBSztZQUFHLE9BQU87UUFDZixLQUFLO1lBQUksT0FBTztRQUNoQixLQUFLO1lBQUksT0FBTztRQUNoQixLQUFLO1lBQUksT0FBTztRQUNoQixLQUFLO1lBQU8sT0FBTztRQUNuQixLQUFLO1lBQUssT0FBTztRQUNqQixLQUFLO1lBQUksT0FBTztRQUNoQixLQUFLO1lBQUssT0FBTztRQUNqQixLQUFLO1lBQUksT0FBTztRQUNoQixLQUFLO1lBQUssT0FBTztRQUNqQixLQUFLO1lBQUssT0FBTztRQUNqQixLQUFLO1lBQUksT0FBTztRQUNoQixLQUFLO1lBQUssT0FBTztJQUNuQjtJQUNBLE9BQU8sYUFBYUE7QUFDdEI7QUFFQUYsY0FBYyxHQUFHLFNBQVVJLElBQUk7SUFDN0IsT0FBUUEsS0FBS0MsV0FBVztRQUN0QixLQUFLO1lBQUssT0FBTztRQUNqQixLQUFLO1lBQVEsT0FBTztRQUNwQixLQUFLO1lBQVEsT0FBTztRQUNwQixLQUFLO1lBQVMsT0FBTztRQUNyQixLQUFLO1lBQU8sT0FBTztRQUNuQixLQUFLO1lBQU8sT0FBTztRQUNuQixLQUFLO1lBQVcsT0FBTztRQUN2QixLQUFLO1lBQU8sT0FBTztRQUNuQixLQUFLO1lBQVEsT0FBTztRQUNwQixLQUFLO1lBQVMsT0FBTztRQUNyQixLQUFLO1lBQVMsT0FBTztRQUNyQixLQUFLO1lBQU8sT0FBTztRQUNuQixLQUFLO1lBQVMsT0FBTztRQUNyQixLQUFLO1lBQVUsT0FBTztRQUN0QixLQUFLO1lBQU0sT0FBTztRQUNsQixLQUFLO1lBQU8sT0FBTztRQUNuQixLQUFLO1lBQVMsT0FBTztRQUNyQixLQUFLO1lBQVksT0FBTztRQUN4QixLQUFLO1lBQU8sT0FBTztRQUNuQixLQUFLO1lBQU0sT0FBTztRQUNsQixLQUFLO1lBQU8sT0FBTztRQUNuQixLQUFLO1lBQU0sT0FBTztRQUNsQixLQUFLO1lBQVMsT0FBTztRQUNyQixLQUFLO1lBQU0sT0FBTztRQUNsQixLQUFLO1lBQVEsT0FBTztRQUNwQixLQUFLO1lBQVMsT0FBTztRQUNyQixLQUFLO1lBQWMsT0FBTztRQUMxQixLQUFLO1lBQU8sT0FBTztRQUNuQixLQUFLO1lBQVMsT0FBTztRQUNyQixLQUFLO1lBQU0sT0FBTztRQUNsQixLQUFLO1lBQU8sT0FBTztRQUNuQixLQUFLO1lBQU8sT0FBTztRQUNuQixLQUFLO1lBQU8sT0FBTztRQUNuQixLQUFLO1lBQU8sT0FBTztRQUNuQixLQUFLO1lBQVMsT0FBTztRQUNyQixLQUFLO1lBQU0sT0FBTztRQUNsQixLQUFLO1lBQVEsT0FBTztRQUNwQixLQUFLO1lBQVEsT0FBTztRQUNwQixLQUFLO1lBQVEsT0FBTztRQUNwQixLQUFLO1lBQU8sT0FBTztRQUNuQixLQUFLO1lBQVEsT0FBTztRQUNwQixLQUFLO1lBQVEsT0FBTztRQUNwQixLQUFLO1lBQU8sT0FBTztRQUNuQixLQUFLO1lBQU8sT0FBTztRQUNuQixLQUFLO1lBQUssT0FBTztJQUNuQjtJQUNBLElBQUlELEtBQUtDLFdBQVcsR0FBR0MsVUFBVSxDQUFDLGFBQWEsT0FBT0MsU0FBU0gsS0FBS0ksS0FBSyxDQUFDO0lBQzFFLE9BQU87QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL21vYmlsZS8uL25vZGVfbW9kdWxlcy9kbnMtcGFja2V0L3R5cGVzLmpzP2JlMzMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydHMudG9TdHJpbmcgPSBmdW5jdGlvbiAodHlwZSkge1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIDE6IHJldHVybiAnQSdcbiAgICBjYXNlIDEwOiByZXR1cm4gJ05VTEwnXG4gICAgY2FzZSAyODogcmV0dXJuICdBQUFBJ1xuICAgIGNhc2UgMTg6IHJldHVybiAnQUZTREInXG4gICAgY2FzZSA0MjogcmV0dXJuICdBUEwnXG4gICAgY2FzZSAyNTc6IHJldHVybiAnQ0FBJ1xuICAgIGNhc2UgNjA6IHJldHVybiAnQ0ROU0tFWSdcbiAgICBjYXNlIDU5OiByZXR1cm4gJ0NEUydcbiAgICBjYXNlIDM3OiByZXR1cm4gJ0NFUlQnXG4gICAgY2FzZSA1OiByZXR1cm4gJ0NOQU1FJ1xuICAgIGNhc2UgNDk6IHJldHVybiAnREhDSUQnXG4gICAgY2FzZSAzMjc2OTogcmV0dXJuICdETFYnXG4gICAgY2FzZSAzOTogcmV0dXJuICdETkFNRSdcbiAgICBjYXNlIDQ4OiByZXR1cm4gJ0ROU0tFWSdcbiAgICBjYXNlIDQzOiByZXR1cm4gJ0RTJ1xuICAgIGNhc2UgNTU6IHJldHVybiAnSElQJ1xuICAgIGNhc2UgMTM6IHJldHVybiAnSElORk8nXG4gICAgY2FzZSA0NTogcmV0dXJuICdJUFNFQ0tFWSdcbiAgICBjYXNlIDI1OiByZXR1cm4gJ0tFWSdcbiAgICBjYXNlIDM2OiByZXR1cm4gJ0tYJ1xuICAgIGNhc2UgMjk6IHJldHVybiAnTE9DJ1xuICAgIGNhc2UgMTU6IHJldHVybiAnTVgnXG4gICAgY2FzZSAzNTogcmV0dXJuICdOQVBUUidcbiAgICBjYXNlIDI6IHJldHVybiAnTlMnXG4gICAgY2FzZSA0NzogcmV0dXJuICdOU0VDJ1xuICAgIGNhc2UgNTA6IHJldHVybiAnTlNFQzMnXG4gICAgY2FzZSA1MTogcmV0dXJuICdOU0VDM1BBUkFNJ1xuICAgIGNhc2UgMTI6IHJldHVybiAnUFRSJ1xuICAgIGNhc2UgNDY6IHJldHVybiAnUlJTSUcnXG4gICAgY2FzZSAxNzogcmV0dXJuICdSUCdcbiAgICBjYXNlIDI0OiByZXR1cm4gJ1NJRydcbiAgICBjYXNlIDY6IHJldHVybiAnU09BJ1xuICAgIGNhc2UgOTk6IHJldHVybiAnU1BGJ1xuICAgIGNhc2UgMzM6IHJldHVybiAnU1JWJ1xuICAgIGNhc2UgNDQ6IHJldHVybiAnU1NIRlAnXG4gICAgY2FzZSAzMjc2ODogcmV0dXJuICdUQSdcbiAgICBjYXNlIDI0OTogcmV0dXJuICdUS0VZJ1xuICAgIGNhc2UgNTI6IHJldHVybiAnVExTQSdcbiAgICBjYXNlIDI1MDogcmV0dXJuICdUU0lHJ1xuICAgIGNhc2UgMTY6IHJldHVybiAnVFhUJ1xuICAgIGNhc2UgMjUyOiByZXR1cm4gJ0FYRlInXG4gICAgY2FzZSAyNTE6IHJldHVybiAnSVhGUidcbiAgICBjYXNlIDQxOiByZXR1cm4gJ09QVCdcbiAgICBjYXNlIDI1NTogcmV0dXJuICdBTlknXG4gIH1cbiAgcmV0dXJuICdVTktOT1dOXycgKyB0eXBlXG59XG5cbmV4cG9ydHMudG9UeXBlID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgc3dpdGNoIChuYW1lLnRvVXBwZXJDYXNlKCkpIHtcbiAgICBjYXNlICdBJzogcmV0dXJuIDFcbiAgICBjYXNlICdOVUxMJzogcmV0dXJuIDEwXG4gICAgY2FzZSAnQUFBQSc6IHJldHVybiAyOFxuICAgIGNhc2UgJ0FGU0RCJzogcmV0dXJuIDE4XG4gICAgY2FzZSAnQVBMJzogcmV0dXJuIDQyXG4gICAgY2FzZSAnQ0FBJzogcmV0dXJuIDI1N1xuICAgIGNhc2UgJ0NETlNLRVknOiByZXR1cm4gNjBcbiAgICBjYXNlICdDRFMnOiByZXR1cm4gNTlcbiAgICBjYXNlICdDRVJUJzogcmV0dXJuIDM3XG4gICAgY2FzZSAnQ05BTUUnOiByZXR1cm4gNVxuICAgIGNhc2UgJ0RIQ0lEJzogcmV0dXJuIDQ5XG4gICAgY2FzZSAnRExWJzogcmV0dXJuIDMyNzY5XG4gICAgY2FzZSAnRE5BTUUnOiByZXR1cm4gMzlcbiAgICBjYXNlICdETlNLRVknOiByZXR1cm4gNDhcbiAgICBjYXNlICdEUyc6IHJldHVybiA0M1xuICAgIGNhc2UgJ0hJUCc6IHJldHVybiA1NVxuICAgIGNhc2UgJ0hJTkZPJzogcmV0dXJuIDEzXG4gICAgY2FzZSAnSVBTRUNLRVknOiByZXR1cm4gNDVcbiAgICBjYXNlICdLRVknOiByZXR1cm4gMjVcbiAgICBjYXNlICdLWCc6IHJldHVybiAzNlxuICAgIGNhc2UgJ0xPQyc6IHJldHVybiAyOVxuICAgIGNhc2UgJ01YJzogcmV0dXJuIDE1XG4gICAgY2FzZSAnTkFQVFInOiByZXR1cm4gMzVcbiAgICBjYXNlICdOUyc6IHJldHVybiAyXG4gICAgY2FzZSAnTlNFQyc6IHJldHVybiA0N1xuICAgIGNhc2UgJ05TRUMzJzogcmV0dXJuIDUwXG4gICAgY2FzZSAnTlNFQzNQQVJBTSc6IHJldHVybiA1MVxuICAgIGNhc2UgJ1BUUic6IHJldHVybiAxMlxuICAgIGNhc2UgJ1JSU0lHJzogcmV0dXJuIDQ2XG4gICAgY2FzZSAnUlAnOiByZXR1cm4gMTdcbiAgICBjYXNlICdTSUcnOiByZXR1cm4gMjRcbiAgICBjYXNlICdTT0EnOiByZXR1cm4gNlxuICAgIGNhc2UgJ1NQRic6IHJldHVybiA5OVxuICAgIGNhc2UgJ1NSVic6IHJldHVybiAzM1xuICAgIGNhc2UgJ1NTSEZQJzogcmV0dXJuIDQ0XG4gICAgY2FzZSAnVEEnOiByZXR1cm4gMzI3NjhcbiAgICBjYXNlICdUS0VZJzogcmV0dXJuIDI0OVxuICAgIGNhc2UgJ1RMU0EnOiByZXR1cm4gNTJcbiAgICBjYXNlICdUU0lHJzogcmV0dXJuIDI1MFxuICAgIGNhc2UgJ1RYVCc6IHJldHVybiAxNlxuICAgIGNhc2UgJ0FYRlInOiByZXR1cm4gMjUyXG4gICAgY2FzZSAnSVhGUic6IHJldHVybiAyNTFcbiAgICBjYXNlICdPUFQnOiByZXR1cm4gNDFcbiAgICBjYXNlICdBTlknOiByZXR1cm4gMjU1XG4gICAgY2FzZSAnKic6IHJldHVybiAyNTVcbiAgfVxuICBpZiAobmFtZS50b1VwcGVyQ2FzZSgpLnN0YXJ0c1dpdGgoJ1VOS05PV05fJykpIHJldHVybiBwYXJzZUludChuYW1lLnNsaWNlKDgpKVxuICByZXR1cm4gMFxufVxuIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJ0b1N0cmluZyIsInR5cGUiLCJ0b1R5cGUiLCJuYW1lIiwidG9VcHBlckNhc2UiLCJzdGFydHNXaXRoIiwicGFyc2VJbnQiLCJzbGljZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/dns-packet/types.js\n");

/***/ })

};
;