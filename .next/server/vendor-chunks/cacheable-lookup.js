"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/cacheable-lookup";
exports.ids = ["vendor-chunks/cacheable-lookup"];
exports.modules = {

/***/ "(ssr)/./node_modules/cacheable-lookup/source/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/cacheable-lookup/source/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ CacheableLookup)\n/* harmony export */ });\n/* harmony import */ var node_dns__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:dns */ \"node:dns\");\n/* harmony import */ var node_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:util */ \"node:util\");\n/* harmony import */ var node_os__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node:os */ \"node:os\");\n\n\n\nconst { Resolver: AsyncResolver } = node_dns__WEBPACK_IMPORTED_MODULE_0__.promises;\nconst kCacheableLookupCreateConnection = Symbol(\"cacheableLookupCreateConnection\");\nconst kCacheableLookupInstance = Symbol(\"cacheableLookupInstance\");\nconst kExpires = Symbol(\"expires\");\nconst supportsALL = typeof node_dns__WEBPACK_IMPORTED_MODULE_0__.ALL === \"number\";\nconst verifyAgent = (agent)=>{\n    if (!(agent && typeof agent.createConnection === \"function\")) {\n        throw new Error(\"Expected an Agent instance as the first argument\");\n    }\n};\nconst map4to6 = (entries)=>{\n    for (const entry of entries){\n        if (entry.family === 6) {\n            continue;\n        }\n        entry.address = `::ffff:${entry.address}`;\n        entry.family = 6;\n    }\n};\nconst getIfaceInfo = ()=>{\n    let has4 = false;\n    let has6 = false;\n    for (const device of Object.values(node_os__WEBPACK_IMPORTED_MODULE_2__.networkInterfaces())){\n        for (const iface of device){\n            if (iface.internal) {\n                continue;\n            }\n            if (iface.family === \"IPv6\") {\n                has6 = true;\n            } else {\n                has4 = true;\n            }\n            if (has4 && has6) {\n                return {\n                    has4,\n                    has6\n                };\n            }\n        }\n    }\n    return {\n        has4,\n        has6\n    };\n};\nconst isIterable = (map)=>{\n    return Symbol.iterator in map;\n};\nconst ignoreNoResultErrors = (dnsPromise)=>{\n    return dnsPromise.catch((error)=>{\n        if (error.code === \"ENODATA\" || error.code === \"ENOTFOUND\" || error.code === \"ENOENT\" // Windows: name exists, but not this record type\n        ) {\n            return [];\n        }\n        throw error;\n    });\n};\nconst ttl = {\n    ttl: true\n};\nconst all = {\n    all: true\n};\nconst all4 = {\n    all: true,\n    family: 4\n};\nconst all6 = {\n    all: true,\n    family: 6\n};\nclass CacheableLookup {\n    constructor({ cache = new Map(), maxTtl = Infinity, fallbackDuration = 3600, errorTtl = 0.15, resolver = new AsyncResolver(), lookup = node_dns__WEBPACK_IMPORTED_MODULE_0__.lookup } = {}){\n        this.maxTtl = maxTtl;\n        this.errorTtl = errorTtl;\n        this._cache = cache;\n        this._resolver = resolver;\n        this._dnsLookup = lookup && (0,node_util__WEBPACK_IMPORTED_MODULE_1__.promisify)(lookup);\n        this.stats = {\n            cache: 0,\n            query: 0\n        };\n        if (this._resolver instanceof AsyncResolver) {\n            this._resolve4 = this._resolver.resolve4.bind(this._resolver);\n            this._resolve6 = this._resolver.resolve6.bind(this._resolver);\n        } else {\n            this._resolve4 = (0,node_util__WEBPACK_IMPORTED_MODULE_1__.promisify)(this._resolver.resolve4.bind(this._resolver));\n            this._resolve6 = (0,node_util__WEBPACK_IMPORTED_MODULE_1__.promisify)(this._resolver.resolve6.bind(this._resolver));\n        }\n        this._iface = getIfaceInfo();\n        this._pending = {};\n        this._nextRemovalTime = false;\n        this._hostnamesToFallback = new Set();\n        this.fallbackDuration = fallbackDuration;\n        if (fallbackDuration > 0) {\n            const interval = setInterval(()=>{\n                this._hostnamesToFallback.clear();\n            }, fallbackDuration * 1000);\n            /* istanbul ignore next: There is no `interval.unref()` when running inside an Electron renderer */ if (interval.unref) {\n                interval.unref();\n            }\n            this._fallbackInterval = interval;\n        }\n        this.lookup = this.lookup.bind(this);\n        this.lookupAsync = this.lookupAsync.bind(this);\n    }\n    set servers(servers) {\n        this.clear();\n        this._resolver.setServers(servers);\n    }\n    get servers() {\n        return this._resolver.getServers();\n    }\n    lookup(hostname, options, callback) {\n        if (typeof options === \"function\") {\n            callback = options;\n            options = {};\n        } else if (typeof options === \"number\") {\n            options = {\n                family: options\n            };\n        }\n        if (!callback) {\n            throw new Error(\"Callback must be a function.\");\n        }\n        // eslint-disable-next-line promise/prefer-await-to-then\n        this.lookupAsync(hostname, options).then((result)=>{\n            if (options.all) {\n                callback(null, result);\n            } else {\n                callback(null, result.address, result.family, result.expires, result.ttl, result.source);\n            }\n        }, callback);\n    }\n    async lookupAsync(hostname, options = {}) {\n        if (typeof options === \"number\") {\n            options = {\n                family: options\n            };\n        }\n        let cached = await this.query(hostname);\n        if (options.family === 6) {\n            const filtered = cached.filter((entry)=>entry.family === 6);\n            if (options.hints & node_dns__WEBPACK_IMPORTED_MODULE_0__.V4MAPPED) {\n                if (supportsALL && options.hints & node_dns__WEBPACK_IMPORTED_MODULE_0__.ALL || filtered.length === 0) {\n                    map4to6(cached);\n                } else {\n                    cached = filtered;\n                }\n            } else {\n                cached = filtered;\n            }\n        } else if (options.family === 4) {\n            cached = cached.filter((entry)=>entry.family === 4);\n        }\n        if (options.hints & node_dns__WEBPACK_IMPORTED_MODULE_0__.ADDRCONFIG) {\n            const { _iface } = this;\n            cached = cached.filter((entry)=>entry.family === 6 ? _iface.has6 : _iface.has4);\n        }\n        if (cached.length === 0) {\n            const error = new Error(`cacheableLookup ENOTFOUND ${hostname}`);\n            error.code = \"ENOTFOUND\";\n            error.hostname = hostname;\n            throw error;\n        }\n        if (options.all) {\n            return cached;\n        }\n        return cached[0];\n    }\n    async query(hostname) {\n        let source = \"cache\";\n        let cached = await this._cache.get(hostname);\n        if (cached) {\n            this.stats.cache++;\n        }\n        if (!cached) {\n            const pending = this._pending[hostname];\n            if (pending) {\n                this.stats.cache++;\n                cached = await pending;\n            } else {\n                source = \"query\";\n                const newPromise = this.queryAndCache(hostname);\n                this._pending[hostname] = newPromise;\n                this.stats.query++;\n                try {\n                    cached = await newPromise;\n                } finally{\n                    delete this._pending[hostname];\n                }\n            }\n        }\n        cached = cached.map((entry)=>{\n            return {\n                ...entry,\n                source\n            };\n        });\n        return cached;\n    }\n    async _resolve(hostname) {\n        // ANY is unsafe as it doesn't trigger new queries in the underlying server.\n        const [A, AAAA] = await Promise.all([\n            ignoreNoResultErrors(this._resolve4(hostname, ttl)),\n            ignoreNoResultErrors(this._resolve6(hostname, ttl))\n        ]);\n        let aTtl = 0;\n        let aaaaTtl = 0;\n        let cacheTtl = 0;\n        const now = Date.now();\n        for (const entry of A){\n            entry.family = 4;\n            entry.expires = now + entry.ttl * 1000;\n            aTtl = Math.max(aTtl, entry.ttl);\n        }\n        for (const entry of AAAA){\n            entry.family = 6;\n            entry.expires = now + entry.ttl * 1000;\n            aaaaTtl = Math.max(aaaaTtl, entry.ttl);\n        }\n        if (A.length > 0) {\n            if (AAAA.length > 0) {\n                cacheTtl = Math.min(aTtl, aaaaTtl);\n            } else {\n                cacheTtl = aTtl;\n            }\n        } else {\n            cacheTtl = aaaaTtl;\n        }\n        return {\n            entries: [\n                ...A,\n                ...AAAA\n            ],\n            cacheTtl\n        };\n    }\n    async _lookup(hostname) {\n        try {\n            const [A, AAAA] = await Promise.all([\n                // Passing {all: true} doesn't return all IPv4 and IPv6 entries.\n                // See https://github.com/szmarczak/cacheable-lookup/issues/42\n                ignoreNoResultErrors(this._dnsLookup(hostname, all4)),\n                ignoreNoResultErrors(this._dnsLookup(hostname, all6))\n            ]);\n            return {\n                entries: [\n                    ...A,\n                    ...AAAA\n                ],\n                cacheTtl: 0\n            };\n        } catch  {\n            return {\n                entries: [],\n                cacheTtl: 0\n            };\n        }\n    }\n    async _set(hostname, data, cacheTtl) {\n        if (this.maxTtl > 0 && cacheTtl > 0) {\n            cacheTtl = Math.min(cacheTtl, this.maxTtl) * 1000;\n            data[kExpires] = Date.now() + cacheTtl;\n            try {\n                await this._cache.set(hostname, data, cacheTtl);\n            } catch (error) {\n                this.lookupAsync = async ()=>{\n                    const cacheError = new Error(\"Cache Error. Please recreate the CacheableLookup instance.\");\n                    cacheError.cause = error;\n                    throw cacheError;\n                };\n            }\n            if (isIterable(this._cache)) {\n                this._tick(cacheTtl);\n            }\n        }\n    }\n    async queryAndCache(hostname) {\n        if (this._hostnamesToFallback.has(hostname)) {\n            return this._dnsLookup(hostname, all);\n        }\n        let query = await this._resolve(hostname);\n        if (query.entries.length === 0 && this._dnsLookup) {\n            query = await this._lookup(hostname);\n            if (query.entries.length !== 0 && this.fallbackDuration > 0) {\n                // Use `dns.lookup(...)` for that particular hostname\n                this._hostnamesToFallback.add(hostname);\n            }\n        }\n        const cacheTtl = query.entries.length === 0 ? this.errorTtl : query.cacheTtl;\n        await this._set(hostname, query.entries, cacheTtl);\n        return query.entries;\n    }\n    _tick(ms) {\n        const nextRemovalTime = this._nextRemovalTime;\n        if (!nextRemovalTime || ms < nextRemovalTime) {\n            clearTimeout(this._removalTimeout);\n            this._nextRemovalTime = ms;\n            this._removalTimeout = setTimeout(()=>{\n                this._nextRemovalTime = false;\n                let nextExpiry = Infinity;\n                const now = Date.now();\n                for (const [hostname, entries] of this._cache){\n                    const expires = entries[kExpires];\n                    if (now >= expires) {\n                        this._cache.delete(hostname);\n                    } else if (expires < nextExpiry) {\n                        nextExpiry = expires;\n                    }\n                }\n                if (nextExpiry !== Infinity) {\n                    this._tick(nextExpiry - now);\n                }\n            }, ms);\n            /* istanbul ignore next: There is no `timeout.unref()` when running inside an Electron renderer */ if (this._removalTimeout.unref) {\n                this._removalTimeout.unref();\n            }\n        }\n    }\n    install(agent) {\n        verifyAgent(agent);\n        if (kCacheableLookupCreateConnection in agent) {\n            throw new Error(\"CacheableLookup has been already installed\");\n        }\n        agent[kCacheableLookupCreateConnection] = agent.createConnection;\n        agent[kCacheableLookupInstance] = this;\n        agent.createConnection = (options, callback)=>{\n            if (!(\"lookup\" in options)) {\n                options.lookup = this.lookup;\n            }\n            return agent[kCacheableLookupCreateConnection](options, callback);\n        };\n    }\n    uninstall(agent) {\n        verifyAgent(agent);\n        if (agent[kCacheableLookupCreateConnection]) {\n            if (agent[kCacheableLookupInstance] !== this) {\n                throw new Error(\"The agent is not owned by this CacheableLookup instance\");\n            }\n            agent.createConnection = agent[kCacheableLookupCreateConnection];\n            delete agent[kCacheableLookupCreateConnection];\n            delete agent[kCacheableLookupInstance];\n        }\n    }\n    updateInterfaceInfo() {\n        const { _iface } = this;\n        this._iface = getIfaceInfo();\n        if (_iface.has4 && !this._iface.has4 || _iface.has6 && !this._iface.has6) {\n            this._cache.clear();\n        }\n    }\n    clear(hostname) {\n        if (hostname) {\n            this._cache.delete(hostname);\n            return;\n        }\n        this._cache.clear();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cacheable-lookup/source/index.js\n");

/***/ })

};
;