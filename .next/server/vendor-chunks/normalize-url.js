"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/normalize-url";
exports.ids = ["vendor-chunks/normalize-url"];
exports.modules = {

/***/ "(ssr)/./node_modules/normalize-url/index.js":
/*!*********************************************!*\
  !*** ./node_modules/normalize-url/index.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ normalizeUrl)\n/* harmony export */ });\n// https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\nconst DATA_URL_DEFAULT_MIME_TYPE = \"text/plain\";\nconst DATA_URL_DEFAULT_CHARSET = \"us-ascii\";\nconst testParameter = (name, filters)=>filters.some((filter)=>filter instanceof RegExp ? filter.test(name) : filter === name);\nconst supportedProtocols = new Set([\n    \"https:\",\n    \"http:\",\n    \"file:\"\n]);\nconst hasCustomProtocol = (urlString)=>{\n    try {\n        const { protocol } = new URL(urlString);\n        return protocol.endsWith(\":\") && !supportedProtocols.has(protocol);\n    } catch  {\n        return false;\n    }\n};\nconst normalizeDataURL = (urlString, { stripHash })=>{\n    const match = /^data:(?<type>[^,]*?),(?<data>[^#]*?)(?:#(?<hash>.*))?$/.exec(urlString);\n    if (!match) {\n        throw new Error(`Invalid URL: ${urlString}`);\n    }\n    let { type, data, hash } = match.groups;\n    const mediaType = type.split(\";\");\n    hash = stripHash ? \"\" : hash;\n    let isBase64 = false;\n    if (mediaType[mediaType.length - 1] === \"base64\") {\n        mediaType.pop();\n        isBase64 = true;\n    }\n    // Lowercase MIME type\n    const mimeType = mediaType.shift()?.toLowerCase() ?? \"\";\n    const attributes = mediaType.map((attribute)=>{\n        let [key, value = \"\"] = attribute.split(\"=\").map((string)=>string.trim());\n        // Lowercase `charset`\n        if (key === \"charset\") {\n            value = value.toLowerCase();\n            if (value === DATA_URL_DEFAULT_CHARSET) {\n                return \"\";\n            }\n        }\n        return `${key}${value ? `=${value}` : \"\"}`;\n    }).filter(Boolean);\n    const normalizedMediaType = [\n        ...attributes\n    ];\n    if (isBase64) {\n        normalizedMediaType.push(\"base64\");\n    }\n    if (normalizedMediaType.length > 0 || mimeType && mimeType !== DATA_URL_DEFAULT_MIME_TYPE) {\n        normalizedMediaType.unshift(mimeType);\n    }\n    return `data:${normalizedMediaType.join(\";\")},${isBase64 ? data.trim() : data}${hash ? `#${hash}` : \"\"}`;\n};\nfunction normalizeUrl(urlString, options) {\n    options = {\n        defaultProtocol: \"http\",\n        normalizeProtocol: true,\n        forceHttp: false,\n        forceHttps: false,\n        stripAuthentication: true,\n        stripHash: false,\n        stripTextFragment: true,\n        stripWWW: true,\n        removeQueryParameters: [\n            /^utm_\\w+/i\n        ],\n        removeTrailingSlash: true,\n        removeSingleSlash: true,\n        removeDirectoryIndex: false,\n        removeExplicitPort: false,\n        sortQueryParameters: true,\n        ...options\n    };\n    // Legacy: Append `:` to the protocol if missing.\n    if (typeof options.defaultProtocol === \"string\" && !options.defaultProtocol.endsWith(\":\")) {\n        options.defaultProtocol = `${options.defaultProtocol}:`;\n    }\n    urlString = urlString.trim();\n    // Data URL\n    if (/^data:/i.test(urlString)) {\n        return normalizeDataURL(urlString, options);\n    }\n    if (hasCustomProtocol(urlString)) {\n        return urlString;\n    }\n    const hasRelativeProtocol = urlString.startsWith(\"//\");\n    const isRelativeUrl = !hasRelativeProtocol && /^\\.*\\//.test(urlString);\n    // Prepend protocol\n    if (!isRelativeUrl) {\n        urlString = urlString.replace(/^(?!(?:\\w+:)?\\/\\/)|^\\/\\//, options.defaultProtocol);\n    }\n    const urlObject = new URL(urlString);\n    if (options.forceHttp && options.forceHttps) {\n        throw new Error(\"The `forceHttp` and `forceHttps` options cannot be used together\");\n    }\n    if (options.forceHttp && urlObject.protocol === \"https:\") {\n        urlObject.protocol = \"http:\";\n    }\n    if (options.forceHttps && urlObject.protocol === \"http:\") {\n        urlObject.protocol = \"https:\";\n    }\n    // Remove auth\n    if (options.stripAuthentication) {\n        urlObject.username = \"\";\n        urlObject.password = \"\";\n    }\n    // Remove hash\n    if (options.stripHash) {\n        urlObject.hash = \"\";\n    } else if (options.stripTextFragment) {\n        urlObject.hash = urlObject.hash.replace(/#?:~:text.*?$/i, \"\");\n    }\n    // Remove duplicate slashes if not preceded by a protocol\n    // NOTE: This could be implemented using a single negative lookbehind\n    // regex, but we avoid that to maintain compatibility with older js engines\n    // which do not have support for that feature.\n    if (urlObject.pathname) {\n        // TODO: Replace everything below with `urlObject.pathname = urlObject.pathname.replace(/(?<!\\b[a-z][a-z\\d+\\-.]{1,50}:)\\/{2,}/g, '/');` when Safari supports negative lookbehind.\n        // Split the string by occurrences of this protocol regex, and perform\n        // duplicate-slash replacement on the strings between those occurrences\n        // (if any).\n        const protocolRegex = /\\b[a-z][a-z\\d+\\-.]{1,50}:\\/\\//g;\n        let lastIndex = 0;\n        let result = \"\";\n        for(;;){\n            const match = protocolRegex.exec(urlObject.pathname);\n            if (!match) {\n                break;\n            }\n            const protocol = match[0];\n            const protocolAtIndex = match.index;\n            const intermediate = urlObject.pathname.slice(lastIndex, protocolAtIndex);\n            result += intermediate.replace(/\\/{2,}/g, \"/\");\n            result += protocol;\n            lastIndex = protocolAtIndex + protocol.length;\n        }\n        const remnant = urlObject.pathname.slice(lastIndex, urlObject.pathname.length);\n        result += remnant.replace(/\\/{2,}/g, \"/\");\n        urlObject.pathname = result;\n    }\n    // Decode URI octets\n    if (urlObject.pathname) {\n        try {\n            urlObject.pathname = decodeURI(urlObject.pathname);\n        } catch  {}\n    }\n    // Remove directory index\n    if (options.removeDirectoryIndex === true) {\n        options.removeDirectoryIndex = [\n            /^index\\.[a-z]+$/\n        ];\n    }\n    if (Array.isArray(options.removeDirectoryIndex) && options.removeDirectoryIndex.length > 0) {\n        let pathComponents = urlObject.pathname.split(\"/\");\n        const lastComponent = pathComponents[pathComponents.length - 1];\n        if (testParameter(lastComponent, options.removeDirectoryIndex)) {\n            pathComponents = pathComponents.slice(0, -1);\n            urlObject.pathname = pathComponents.slice(1).join(\"/\") + \"/\";\n        }\n    }\n    if (urlObject.hostname) {\n        // Remove trailing dot\n        urlObject.hostname = urlObject.hostname.replace(/\\.$/, \"\");\n        // Remove `www.`\n        if (options.stripWWW && /^www\\.(?!www\\.)[a-z\\-\\d]{1,63}\\.[a-z.\\-\\d]{2,63}$/.test(urlObject.hostname)) {\n            // Each label should be max 63 at length (min: 1).\n            // Source: https://en.wikipedia.org/wiki/Hostname#Restrictions_on_valid_host_names\n            // Each TLD should be up to 63 characters long (min: 2).\n            // It is technically possible to have a single character TLD, but none currently exist.\n            urlObject.hostname = urlObject.hostname.replace(/^www\\./, \"\");\n        }\n    }\n    // Remove query unwanted parameters\n    if (Array.isArray(options.removeQueryParameters)) {\n        // eslint-disable-next-line unicorn/no-useless-spread -- We are intentionally spreading to get a copy.\n        for (const key of [\n            ...urlObject.searchParams.keys()\n        ]){\n            if (testParameter(key, options.removeQueryParameters)) {\n                urlObject.searchParams.delete(key);\n            }\n        }\n    }\n    if (!Array.isArray(options.keepQueryParameters) && options.removeQueryParameters === true) {\n        urlObject.search = \"\";\n    }\n    // Keep wanted query parameters\n    if (Array.isArray(options.keepQueryParameters) && options.keepQueryParameters.length > 0) {\n        // eslint-disable-next-line unicorn/no-useless-spread -- We are intentionally spreading to get a copy.\n        for (const key of [\n            ...urlObject.searchParams.keys()\n        ]){\n            if (!testParameter(key, options.keepQueryParameters)) {\n                urlObject.searchParams.delete(key);\n            }\n        }\n    }\n    // Sort query parameters\n    if (options.sortQueryParameters) {\n        urlObject.searchParams.sort();\n        // Calling `.sort()` encodes the search parameters, so we need to decode them again.\n        try {\n            urlObject.search = decodeURIComponent(urlObject.search);\n        } catch  {}\n    }\n    if (options.removeTrailingSlash) {\n        urlObject.pathname = urlObject.pathname.replace(/\\/$/, \"\");\n    }\n    // Remove an explicit port number, excluding a default port number, if applicable\n    if (options.removeExplicitPort && urlObject.port) {\n        urlObject.port = \"\";\n    }\n    const oldUrlString = urlString;\n    // Take advantage of many of the Node `url` normalizations\n    urlString = urlObject.toString();\n    if (!options.removeSingleSlash && urlObject.pathname === \"/\" && !oldUrlString.endsWith(\"/\") && urlObject.hash === \"\") {\n        urlString = urlString.replace(/\\/$/, \"\");\n    }\n    // Remove ending `/` unless removeSingleSlash is false\n    if ((options.removeTrailingSlash || urlObject.pathname === \"/\") && urlObject.hash === \"\" && options.removeSingleSlash) {\n        urlString = urlString.replace(/\\/$/, \"\");\n    }\n    // Restore relative protocol, if applicable\n    if (hasRelativeProtocol && !options.normalizeProtocol) {\n        urlString = urlString.replace(/^http:\\/\\//, \"//\");\n    }\n    // Remove http/https\n    if (options.stripProtocol) {\n        urlString = urlString.replace(/^(?:https?:)?\\/\\//, \"\");\n    }\n    return urlString;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/normalize-url/index.js\n");

/***/ })

};
;