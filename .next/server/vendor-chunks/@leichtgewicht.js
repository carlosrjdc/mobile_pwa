"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@leichtgewicht";
exports.ids = ["vendor-chunks/@leichtgewicht"];
exports.modules = {

/***/ "(ssr)/./node_modules/@leichtgewicht/ip-codec/index.cjs":
/*!********************************************************!*\
  !*** ./node_modules/@leichtgewicht/ip-codec/index.cjs ***!
  \********************************************************/
/***/ ((module, exports) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// GENERATED FILE. DO NOT EDIT.\n\nvar ipCodec = function(exports1) {\n    \"use strict\";\n    Object.defineProperty(exports1, \"__esModule\", {\n        value: true\n    });\n    exports1.decode = decode;\n    exports1.encode = encode;\n    exports1.familyOf = familyOf;\n    exports1.name = void 0;\n    exports1.sizeOf = sizeOf;\n    exports1.v6 = exports1.v4 = void 0;\n    const v4Regex = /^(\\d{1,3}\\.){3,3}\\d{1,3}$/;\n    const v4Size = 4;\n    const v6Regex = /^(::)?(((\\d{1,3}\\.){3}(\\d{1,3}){1})?([0-9a-f]){0,4}:{0,2}){1,8}(::)?$/i;\n    const v6Size = 16;\n    const v4 = {\n        name: \"v4\",\n        size: v4Size,\n        isFormat: (ip)=>v4Regex.test(ip),\n        encode (ip, buff, offset) {\n            offset = ~~offset;\n            buff = buff || new Uint8Array(offset + v4Size);\n            const max = ip.length;\n            let n = 0;\n            for(let i = 0; i < max;){\n                const c = ip.charCodeAt(i++);\n                if (c === 46) {\n                    // \".\"\n                    buff[offset++] = n;\n                    n = 0;\n                } else {\n                    n = n * 10 + (c - 48);\n                }\n            }\n            buff[offset] = n;\n            return buff;\n        },\n        decode (buff, offset) {\n            offset = ~~offset;\n            return `${buff[offset++]}.${buff[offset++]}.${buff[offset++]}.${buff[offset]}`;\n        }\n    };\n    exports1.v4 = v4;\n    const v6 = {\n        name: \"v6\",\n        size: v6Size,\n        isFormat: (ip)=>ip.length > 0 && v6Regex.test(ip),\n        encode (ip, buff, offset) {\n            offset = ~~offset;\n            let end = offset + v6Size;\n            let fill = -1;\n            let hexN = 0;\n            let decN = 0;\n            let prevColon = true;\n            let useDec = false;\n            buff = buff || new Uint8Array(offset + v6Size); // Note: This algorithm needs to check if the offset\n            // could exceed the buffer boundaries as it supports\n            // non-standard compliant encodings that may go beyond\n            // the boundary limits. if (offset < end) checks should\n            // not be necessary...\n            for(let i = 0; i < ip.length; i++){\n                let c = ip.charCodeAt(i);\n                if (c === 58) {\n                    // :\n                    if (prevColon) {\n                        if (fill !== -1) {\n                            // Not Standard! (standard doesn't allow multiple ::)\n                            // We need to treat\n                            if (offset < end) buff[offset] = 0;\n                            if (offset < end - 1) buff[offset + 1] = 0;\n                            offset += 2;\n                        } else if (offset < end) {\n                            // :: in the middle\n                            fill = offset;\n                        }\n                    } else {\n                        // : ends the previous number\n                        if (useDec === true) {\n                            // Non-standard! (ipv4 should be at end only)\n                            // A ipv4 address should not be found anywhere else but at\n                            // the end. This codec also support putting characters\n                            // after the ipv4 address..\n                            if (offset < end) buff[offset] = decN;\n                            offset++;\n                        } else {\n                            if (offset < end) buff[offset] = hexN >> 8;\n                            if (offset < end - 1) buff[offset + 1] = hexN & 0xff;\n                            offset += 2;\n                        }\n                        hexN = 0;\n                        decN = 0;\n                    }\n                    prevColon = true;\n                    useDec = false;\n                } else if (c === 46) {\n                    // . indicates IPV4 notation\n                    if (offset < end) buff[offset] = decN;\n                    offset++;\n                    decN = 0;\n                    hexN = 0;\n                    prevColon = false;\n                    useDec = true;\n                } else {\n                    prevColon = false;\n                    if (c >= 97) {\n                        c -= 87; // a-f ... 97~102 -87 => 10~15\n                    } else if (c >= 65) {\n                        c -= 55; // A-F ... 65~70 -55 => 10~15\n                    } else {\n                        c -= 48; // 0-9 ... starting from charCode 48\n                        decN = decN * 10 + c;\n                    } // We don't know yet if its a dec or hex number\n                    hexN = (hexN << 4) + c;\n                }\n            }\n            if (prevColon === false) {\n                // Commiting last number\n                if (useDec === true) {\n                    if (offset < end) buff[offset] = decN;\n                    offset++;\n                } else {\n                    if (offset < end) buff[offset] = hexN >> 8;\n                    if (offset < end - 1) buff[offset + 1] = hexN & 0xff;\n                    offset += 2;\n                }\n            } else if (fill === 0) {\n                // Not Standard! (standard doesn't allow multiple ::)\n                // This means that a : was found at the start AND end which means the\n                // end needs to be treated as 0 entry...\n                if (offset < end) buff[offset] = 0;\n                if (offset < end - 1) buff[offset + 1] = 0;\n                offset += 2;\n            } else if (fill !== -1) {\n                // Non-standard! (standard doens't allow multiple ::)\n                // Here we find that there has been a :: somewhere in the middle\n                // and the end. To treat the end with priority we need to move all\n                // written data two bytes to the right.\n                offset += 2;\n                for(let i = Math.min(offset - 1, end - 1); i >= fill + 2; i--){\n                    buff[i] = buff[i - 2];\n                }\n                buff[fill] = 0;\n                buff[fill + 1] = 0;\n                fill = offset;\n            }\n            if (fill !== offset && fill !== -1) {\n                // Move the written numbers to the end while filling the everything\n                // \"fill\" to the bytes with zeros.\n                if (offset > end - 2) {\n                    // Non Standard support, when the cursor exceeds bounds.\n                    offset = end - 2;\n                }\n                while(end > fill){\n                    buff[--end] = offset < end && offset > fill ? buff[--offset] : 0;\n                }\n            } else {\n                // Fill the rest with zeros\n                while(offset < end){\n                    buff[offset++] = 0;\n                }\n            }\n            return buff;\n        },\n        decode (buff, offset) {\n            offset = ~~offset;\n            let result = \"\";\n            for(let i = 0; i < v6Size; i += 2){\n                if (i !== 0) {\n                    result += \":\";\n                }\n                result += (buff[offset + i] << 8 | buff[offset + i + 1]).toString(16);\n            }\n            return result.replace(/(^|:)0(:0)*:0(:|$)/, \"$1::$3\").replace(/:{3,4}/, \"::\");\n        }\n    };\n    exports1.v6 = v6;\n    const name = \"ip\";\n    exports1.name = name;\n    function sizeOf(ip) {\n        if (v4.isFormat(ip)) return v4.size;\n        if (v6.isFormat(ip)) return v6.size;\n        throw Error(`Invalid ip address: ${ip}`);\n    }\n    function familyOf(string) {\n        return sizeOf(string) === v4.size ? 1 : 2;\n    }\n    function encode(ip, buff, offset) {\n        offset = ~~offset;\n        const size = sizeOf(ip);\n        if (typeof buff === \"function\") {\n            buff = buff(offset + size);\n        }\n        if (size === v4.size) {\n            return v4.encode(ip, buff, offset);\n        }\n        return v6.encode(ip, buff, offset);\n    }\n    function decode(buff, offset, length) {\n        offset = ~~offset;\n        length = length || buff.length - offset;\n        if (length === v4.size) {\n            return v4.decode(buff, offset, length);\n        }\n        if (length === v6.size) {\n            return v6.decode(buff, offset, length);\n        }\n        throw Error(`Invalid buffer size needs to be ${v4.size} for v4 or ${v6.size} for v6.`);\n    }\n    return \"default\" in exports1 ? exports1.default : exports1;\n}({});\nif (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n    return ipCodec;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\nelse {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@leichtgewicht/ip-codec/index.cjs\n");

/***/ })

};
;